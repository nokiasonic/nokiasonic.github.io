<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Obsidian学习（二）</title>
    <url>/2021/10/09/Obsidian%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h1 id="安装">安装</h1>
<p>通过<a href="%5BObsidian%5D(https://obsidian.md/)">官网</a>下载并安装程序。 安装完后，可以在<code>Settings</code> -&gt; <code>About</code> -&gt; <code>Language</code>中选择界面语言，我还是使用英文界面，方便对接英文论坛内容。</p>
<a id="more"></a>
<h1 id="第一条笔记">第一条笔记</h1>
<h2 id="创建新笔记库">创建新笔记库</h2>
<p>打开<code>obsidian</code>, 可以选择从已有目录创建笔记库，也可以直接创建新笔记库，这里的库是基于目录来进行识别的。</p>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/Obsidian_nhFVhNwfsT.png" /></p>
<h2 id="创建知识管理库结构">创建知识管理库结构</h2>
<p>根据自己的实践需要来建立知识管理库结构，示例：[[我的笔记系统结构]]</p>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/Obsidian_OPlKZFHfIr.png" /></p>
<p>这时，在整个库里只有这些目录，在其下是空空如也的。</p>
<h2 id="写第一条笔记">写第一条笔记</h2>
<p>比如撰写<code>中国图书馆分类法</code>条目来作为自己的第一条笔记。</p>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/Obsidian_qT0pelIdhd.png" /></p>
<p>有两种方式来新建一条笔记：</p>
<ol type="1">
<li>点击界面上的<code>Create new file</code>或者使用快捷键<code>Ctrl + N</code>;</li>
<li>点击左侧导航栏处的<code>New note</code>图标。</li>
</ol>
<p>我们在目录<code>01. 闪念笔记</code>下来新建一个名为<code>中国图书馆分类法.md</code>的文件。使用<code>markdown</code>的语法写作内容。</p>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/Obsidian_lTIOQIhJoP.png" /></p>
<p>屏幕右上角红框处，按住<code>Ctrl</code>键并点击，可以生成一个新的分栏来进行预览。如果只是点击，则是在编辑和预览状态间切换。</p>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/Obsidian_t2KVZrispz.png" /></p>
<p>从<code>ZettleKasten</code>笔记记录的角度来说，需要为每一篇笔记编一个能唯一识别的号码，我们可以在<code>Metadata(元数据)</code>中来增加<code>uid</code>项来实现，同时为了方便归类，也增加<code>cid（classification number）</code>,这可以根据汉语主题词表来进行定义。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 中国图书馆分类法</span><br><span class="line">date: 2021-10-09 22:38:24</span><br><span class="line">uid: 20211009223824</span><br><span class="line">cid: G254.122.001</span><br><span class="line">categories: [知识管理]</span><br><span class="line">tags: [图书馆分类法&#x2F;中图法]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>可以以此为依据，在<code>obsidian</code>中建立模板，方便撰写新笔记时直接插入。 1. 在<code>Core plugins</code>里启用<code>Templates</code>插件 2. 需要在 <code>Settings</code> -&gt; <code>Templates</code> -&gt; <code>Template folder location</code> 中指定模板文件夹的路径。 3. 在左边导航栏中点击<code>Insert template</code>或者为这功能设置一个快捷键，这里我设为<code>Ctrl + Q</code>。在写新笔记时就可以插入相应的模板内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">date: &#123;&#123;date:YYYY-MM-DD HH:mm:ss&#125;&#125;</span><br><span class="line">uid: &#123;&#123;date:YYYYMMDDHHmmss&#125;&#125;</span><br><span class="line">cid: xxxx.xxxx.xxx</span><br><span class="line">categories: [xxxx]</span><br><span class="line">tags: [xxxx&#x2F;xxx]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>至此，第一个笔记已经顺利完成，可以移入分类目录中使用。</p>
<h1 id="学习小结">学习小结</h1>
<ol type="1">
<li>熟悉<code>obsidian</code>的基本界面操作。</li>
<li>模板的配置及使用。</li>
</ol>
]]></content>
      <categories>
        <category>专栏</category>
      </categories>
      <tags>
        <tag>Obsidian/学习</tag>
      </tags>
  </entry>
  <entry>
    <title>docker创建的vhdx文件无法移动或删除</title>
    <url>/2020/12/23/docker%E5%88%9B%E5%BB%BA%E7%9A%84vhdx%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E7%A7%BB%E5%8A%A8%E6%88%96%E5%88%A0%E9%99%A4/</url>
    <content><![CDATA[<p>操作系统为win10 professional,由于开始使用docker时没有及时调整img存放的位置，导致C盘空间被耗尽。所以决定迁移img至数据盘。但在通过dockerdeskto setting更改存储位置时，发生了异常，没有完全执行成功。初次重启后无法正常启动docker。</p>
<p><img src="https://s2.loli.net/2022/04/14/jYHEVXgAFdQ96tk.png" /></p>
<p>再次重启后发现原有的vhdx文件没有被迁移至指定的位置， 且无法拷贝，移动或删除，提示无管理员权限。</p>
<a id="more"></a>
<p>处理过程如下：</p>
<ol type="1">
<li>开启本机Administrator账户：</li>
</ol>
<p>​ 快捷键Win + X, 计算机管理 - 系统工具 - 本地用户和组 - 用户， 右键选择"Administrator"属性，取消勾选“账户已禁用”，重启计算机， 然后选择Administrator账号登录即可。</p>
<p>​ 但是在尝试拷贝及移动vhdx文件时，仍然提示权限不够。没有解决该问题</p>
<ol start="2" type="1">
<li><p>恢复docker desktop为出厂设置</p>
<p>点击右上“troubleshooting”图标，选择恢复出厂设置</p></li>
</ol>
<p><img src="https://s2.loli.net/2022/04/14/32rOyojniPdGg1E.png" /> 重启后， docker及内部的容器都运行正常，再次尝试改变存储位置。这次运行成功， vhdx文件正常迁移到设定目标位置，且 docker及内部的容器都运行正常。问题得以解决，判断是首次操作时出现异常，导致文件迁移未完成且处于死锁状态。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>hyper-v</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2020/11/19/hello-world/</url>
    <content><![CDATA[<h2 id="橘子的博客终于开通了">橘子的博客终于开通了</h2>
<p>一直偷懒，最近终于良心发现，总觉以前的光阴虚度，不想未来同样蹉跎岁月，自当奋起，希望能记录下未来成长过程中的点点滴滴想法和经验。</p>
<p>借词聊表胸怀</p>
<blockquote>
<p><font color=green><strong>江城子·密州出猎</strong></font><br />
<font color=blue><strong>宋 苏轼</strong></font></p>
<p>老夫聊发少年狂， 左牵黄，右擎苍， 锦帽貂裘，千骑卷平冈。 为报倾城随太守，亲射虎，看孙郎。</p>
<p>酒酣胸胆尚开张， 鬓微霜，又何妨! 持节云中，何日遣冯唐? 会挽雕弓如满月，西北望，射天狼。</p>
</blockquote>
<h2 id="本站用途">本站用途</h2>
<p>这是个人用来学习研究金融工程，机器学习的小窝，</p>
]]></content>
      <categories>
        <category>美好生活</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>tqdm进度条的使用</title>
    <url>/2020/12/23/tqdm%E8%BF%9B%E5%BA%A6%E6%9D%A1%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>以前使用的是processbar来制作进度条， 听闻tqdm性能更好些，遂尝试使用一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tqdm(total=<span class="built_in">len</span>(codelist),<span class="built_in">ascii</span>= <span class="literal">True</span>, ncols=<span class="number">90</span>,colour=<span class="string">&quot;green&quot;</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">for</span> ts_code <span class="keyword">in</span> codelist:</span><br><span class="line">        pbar.set_description(<span class="string">&quot;Processing %s&quot;</span> % ts_code)</span><br><span class="line">        ......</span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/DJqSNL69eTsIZKP.png" /> 参数使用：</p>
<p><code>ascii = True</code>, 缺省是<code>False</code>, 当使用它时，不是以正常块状来做进度条，而是以"123456789#"的方式。</p>
<p><code>ncols = 90</code>, 这里可以根据屏幕大小来进行控制，保证进度条不产生换行的情况。</p>
<p><code>colour = "green"</code>, 在版本4.5之后引入，可以设置进度条的颜色。</p>
<p><code>desc</code>或利用<code>set_desciption</code>，用来设置进度条左侧的文字信息。</p>
<p>从使用情况来看，还是比较令人满意的。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>tqdm</tag>
      </tags>
  </entry>
  <entry>
    <title>【Arduino】ESP8266开发实例</title>
    <url>/2021/08/23/%E3%80%90Arduino%E3%80%91ESP8266%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="esp8266的arduino开发环境搭建">ESP8266的Arduino开发环境搭建</h1>
<p>有三种常用的环境搭建方法。</p>
<a id="more"></a>
<h2 id="arduino下的工具的开发板管理器进行在线下载">1. Arduino下的工具的开发板管理器进行在线下载</h2>
<p>步骤：</p>
<p>1/ 首先添加ESP8266板支持</p>
<p>进入<code>首选项（Preferences）</code>，找到<strong>附加开发板管理器地址</strong>（Additional Board Manager URLs），并在其后添加如下信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;arduino.esp8266.com&#x2F;stable&#x2F;package_esp8266com_index.json</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/SlmziK2rfdvZqUV.png" /> 2/ 安装硬件包</p>
<p>点击<code>工具 - 开发板 - 开发板管理器</code>，进入开发板管理器界面： 在搜索栏上面输入<code>ESP8266</code>，选择最新版本点击“安装”，</p>
<p><img src="https://s2.loli.net/2022/04/14/OUyNpZagnAS8LYt.png" /></p>
<h2 id="下载esp8266的硬件包再离线安装">2. 下载ESP8266的硬件包再离线安装</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd E:</span><br><span class="line">mkdir esp8266</span><br><span class="line">cd esp8266</span><br><span class="line">git clone https://github.com/esp8266/Arduino.git esp8266</span><br></pre></td></tr></table></figure>
<p>当clone完毕后，在esp8266文件夹下会有板级工具包的目录。进入tools，运行get.py的python文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd tools</span><br><span class="line">python get.py</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/FVAK9NDlw3Bga8G.png" /></p>
<h2 id="直接使用封装好的esp8266-sdk进行环境配置">3. 直接使用封装好的ESP8266 SDK进行环境配置</h2>
<p><strong>点击下方链接下载打包好的esp8266安装包，选择任一版本直接运行并解压即可。</strong></p>
<p><a href="https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/get-started/windows-setup.html">安装说明</a></p>
<p>无论使用何种方法，只要可以在Arduino IDE中可以看到ESP8266的开发板，开发环境就算搭建好了。可以开始进行开发和学习过程了。</p>
<h1 id="制作一支带逗比功能的笔">制作一支带逗比功能的笔</h1>
<p><img src="https://s2.loli.net/2022/04/14/skItQylPxZMd1A4.png" /></p>
<h2 id="材料准备">材料准备</h2>
<ul>
<li><p>9g舵机3个</p></li>
<li><p>白板笔1支</p></li>
<li><p>NodeMcu ESP8266开发板一块</p></li>
<li><p>舵机拉杆 1.2MM Z字钢丝</p></li>
<li><p>M3x3 平头螺丝若干</p></li>
<li><p>M3 螺母若干</p></li>
<li><p>M3x12 螺丝若干</p></li>
<li><p>M3x6 对接螺丝若干</p></li>
<li><p>亚克力激光切割零件一批</p></li>
<li><p>3D打印笔架与笔帽</p>
<p><img src="https://s2.loli.net/2022/04/14/soLHUcnrTdX6tJV.jpg" /></p></li>
</ul>
<h2 id="制作步骤">制作步骤</h2>
<h3 id="组装">组装</h3>
<ul>
<li><p>左右舵机安装</p>
<p>舵机与板件通过舵机自带的M2螺丝固定（红色框部分），板件中间位置的连接用M3螺丝加螺母固定（橙色框部分）</p>
<p><img src="https://s2.loli.net/2022/04/14/6yFYisQTmX7cRzh.jpg" /></p></li>
<li><p>四杆机械臂安装</p>
<p>将机械臂所需的板件与舵机自带的连接杆粘合，并用M4x10的螺丝加螺母固定（推荐使用M3x6的对接螺丝）。</p>
<p><img src="https://s2.loli.net/2022/04/14/iTMAkhdEWFwo1cY.jpg" /></p>
<p><img src="https://s2.loli.net/2022/04/14/kt8eYSvEh4n7MjC.jpg" /></p>
<p><img src="https://s2.loli.net/2022/04/14/LPAVYJ4NuykgXj8.jpg" /></p>
<p>在舵机调式完毕后，用M2.5x10的螺丝将机械臂固定至舵机上。这里如果有较长的M2螺丝效果会更好一些，舵机自带的M2螺丝稍短了一点。</p></li>
<li><p>上舵机安装</p></li>
</ul>
<p>​ 上龙门架用M3x12的螺丝加螺母连接，舵机与板件用自带的M2螺丝固定</p>
<p>​ <img src="https://s2.loli.net/2022/04/14/9Gqe5czBoAVfwrd.jpg" style="zoom: 50%;" /></p>
<h3 id="esp8266的调试">ESP8266的调试</h3>
<p>将<code>arduinojson5</code>和<code>NTPclient</code>添加到<code>arduino libraries</code>中。</p>
<p><img src="https://s2.loli.net/2022/04/14/Uqh5SKYiDC13XBz.png" /></p>
<p>利用ESP8266自带示例ESP8266-blink及ESP8266WiFi-NTPClient进行测试，ESP8266模块工作正常</p>
<p><img src="https://s2.loli.net/2022/04/14/kHKoFntirpLq1dy.png" /></p>
<p>从无线路由器的用户列表中也可以看到ESP8266确实已经连接成功。</p>
<p><img src="https://s2.loli.net/2022/04/14/b864MIBAxspHUGd.png" /></p>
<h3 id="esp8266与舵机的联调">ESP8266与舵机的联调</h3>
<p>通过坐标的变化来控制笔的行进与书写。</p>
<p>坐标参数的定义如下：</p>
<p><img src="https://s2.loli.net/2022/04/14/pd5rowaAsv19BDJ.jpg" /></p>
<p>打开程序上传代码成功后，左右臂舵机会左右来回旋转，请注意舵机的旋转方向，并在最左或最右时迅速拔掉供电的USB。断电停机后再安装摆臂。摆臂的安装位置，如下图，最左是灰色，最右是白色，让摆臂尽量停留在0,90,180度位置上。安装好摆臂后，接电继续工作，看舵机是否是在灰色和白色两个位置上往复。差距小时，可以修改程序中下面的4个参数修正，差距太大，请拆掉摆臂重装。</p>
<p><img src="https://s2.loli.net/2022/04/14/sUcuHKakiX4MRFf.png" /></p>
<p><code>control.h</code>,原始代码中垂直方向共用<code>SERVOFAKTOR</code>来控制，在微调的时候发现效果不好，分别使用<code>SERVOFAKTORLEFT</code>和<code>SERVOFAKTORRIGHT</code>来控制。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// When in calibration mode, adjust the following factor until the servos move exactly 90 degrees</span></span><br><span class="line"><span class="keyword">int</span> SERVOFAKTORLEFT = <span class="number">605</span>;</span><br><span class="line"><span class="keyword">int</span> SERVOFAKTORRIGHT = <span class="number">1090</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Zero-position of left and right servo</span></span><br><span class="line">  <span class="comment">// When in calibration mode, adjust the NULL-values so that the servo arms are at all times parallel</span></span><br><span class="line">  <span class="comment">// either to the X or Y axis</span></span><br><span class="line"><span class="keyword">int</span> SERVOLEFTNULL = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">int</span> SERVORIGHTNULL = <span class="number">800</span>;</span><br></pre></td></tr></table></figure>
<p>相应地，在<code>control.cpp</code>中，修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">servo_left.writeMicroseconds(<span class="built_in">floor</span>(((a2 + a1 - M_PI) * SERVOFAKTOR) + SERVOLEFTNULL));</span><br><span class="line">servo_right.writeMicroseconds(<span class="built_in">floor</span>(((a1 - a2) * SERVOFAKTOR) + SERVORIGHTNULL)); </span><br></pre></td></tr></table></figure>
<p>为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">servo_left.writeMicroseconds(<span class="built_in">floor</span>(((a2 + a1 - M_PI) * SERVOFAKTORLEFT) + SERVOLEFTNULL));</span><br><span class="line">servo_right.writeMicroseconds(<span class="built_in">floor</span>(((a1 - a2) * SERVOFAKTORRIGHT) + SERVORIGHTNULL));</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>调节抬臂舵机的写字，抬笔和抓笔擦位置，。将笔装上后再进行调试，否则因为笔的重量会导致偏差。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> LIFT0 = <span class="number">1750</span>;   <span class="comment">//落笔写字 on drawing surface</span></span><br><span class="line"><span class="keyword">int</span> LIFT1 = <span class="number">1650</span>;   <span class="comment">//写字时抬臂动作 between numbers</span></span><br><span class="line"><span class="keyword">int</span> LIFT2 = <span class="number">1470</span>;   <span class="comment">//高抬笔架  going towards sweeper</span></span><br></pre></td></tr></table></figure>
<h3 id="工作原理">工作原理</h3>
<p>xy坐标到舵机角度转换</p>
<p><img src="https://s2.loli.net/2022/04/14/KMlaAFi2m3Ngzkn.png" /></p>
<h2 id="演示">演示</h2>
<p>制作完成！</p>
<p><a href="https://www.bilibili.com/video/BV1r64y1a76r/">制作及演示视频</a></p>
<h1 id="参考">参考</h1>
<p>1/ <a href="https://zhuanlan.zhihu.com/p/67700105">如何制作一支带逗比功能的笔 - 知乎 (zhihu.com)</a></p>
<p>2/ <a href="https://www.amobbs.com/thread-5687693-1-1.html">用stc15w4k32移植arduino小贱钟Plotclock (amobbs.com 阿莫电子论坛)</a></p>
<p>3/ <a href="https://www.geek-workshop.com/thread-10024-1-1.html">Plotclock小贱钟的调试方法 - 机械坊 - 极客工坊 - Powered by Discuz! (geek-workshop.com)</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>arduino</category>
      </categories>
      <tags>
        <tag>arduino</tag>
        <tag>ESP8266</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Next主题更好地支持LaTeX数学公式</title>
    <url>/2020/12/17/%E3%80%90Hexo%E3%80%91Next%E4%B8%BB%E9%A2%98%E6%9B%B4%E5%A5%BD%E5%9C%B0%E6%94%AF%E6%8C%81LaTeX%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<p>在Typora中可以正常显示的<span class="math inline">\(L^AT_EX\)</span>数学公式，在Hexo NexT主题下却渲染得不是太理想。我们去最新的<a href="https://theme-next.js.org/docs/third-party-services/math-equations.html">NexT官方文档</a>里看看如何解决吧！</p>
<a id="more"></a>
<h2 id="实施步骤">实施步骤</h2>
<p>NexT主题现在提供两种数学公式的渲染方式 <a href="https://www.mathjax.org/">MathJax</a> 及 <a href="https://katex.org/">KaTeX</a>。其中<code>katex</code>的速度更快，但是对于<span class="math inline">\(L^AT_EX\)</span>的支持有一定的限制。所以除非你的博客数量实在是过于庞大，不然就可以直接使用<code>mathjax</code>。</p>
<p>使用<code>mathjax</code>，可以选择多种渲染引擎，但推荐使用</p>
<ul>
<li><a href="https://github.com/wzpan/hexo-renderer-pandoc">hexo-renderer-pandoc</a></li>
</ul>
<p>使用其它诸如<a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a>之类的引擎（这是Hexo默认首先用来渲染MarkDown的），然后再交给<code>mathjax</code>渲染。<code>hexo-renderer-marked</code>会把一些特殊的MarkDown符号转换为相应的html标签，比如在MarkDown语法中，下划线 _ 代表斜体，会被转化为&lt; em&gt;标签，\也会被转义成一个。而类<span class="math inline">\(L^AT_EX\)</span>格式书写的数学公式下划线 _ 表示角标，\表示公式换行，有特殊的含义，所以<code>mathjax</code>引擎在渲染数学公式的时候就会无法正常渲染。</p>
<h3 id="安装pandoc">安装pandoc</h3>
<p><a href="https://github.com/jgm/pandoc/blob/master/INSTALL.md">安装文档</a>及<a href="https://github.com/jgm/pandoc/releases/latest">下载链接</a>]，因为在安装<code>Anaconda</code>时已经含有pandoc。这里不再单独进行安装。</p>
<h3 id="配置next">配置NexT</h3>
<ol type="1">
<li>首先，在NexT主题配置文件中将<code>mathjax</code>设为渲染引擎</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>然后，卸载最初的<code>hexo-renderer-marked</code>引擎并安装<code>hexo-renderer-pandoc</code>。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm un hexo-renderer-marked</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm i hexo-renderer-pandoc</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/LcFgNREOrmaQWsS.png" /></p>
<ol start="3" type="1">
<li>在更换完渲染引擎后，执行一下<code>hexo clean</code>，然后再进行部署或启动本地服务器来验证渲染是否工作正常。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean &amp;&amp; hexo g -d</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> or hexo clean &amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】github开启令牌验证后无法更新Blog的问题</title>
    <url>/2021/08/30/%E3%80%90Hexo%E3%80%91github%E5%BC%80%E5%90%AF%E4%BB%A4%E7%89%8C%E9%AA%8C%E8%AF%81%E5%90%8E%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0Blog%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>从2021年8月13日起， github不再支持帐号密码验证Git操作，改用token(令牌)或SSH密钥。</p>
<p><img src="https://s2.loli.net/2022/04/14/L6YvJDdyVg5uxot.png" /></p>
<p><strong>解决方案</strong></p>
<p>1/ 首先登入Github 账户，<code>Setting - Developer settings - Personal access tokens - Generate new token</code>, Note 填写 Hexo 或 Blog 之类，勾选第一项 repo，然后 Generate token；为Hexo项目生成一个令牌。</p>
<p>2/ 修改<code>_config.yml</code>,</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://[复制生成的token]@github.com/nokiasonic/nokiasonic.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>即可正常hexo d更新blog。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】Next主题标题颜色设置</title>
    <url>/2020/12/10/%E3%80%90Hexo%E3%80%91Next%E4%B8%BB%E9%A2%98%E6%A0%87%E9%A2%98%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>主题采用的是Next的Mist。 不太喜欢全部都是黑灰白色的主基调，希望将标题来点明亮的颜色。以下来介绍具体的配置方法。</p>
<a id="more"></a>
<h2 id="更改标题配色">更改标题配色</h2>
<p>找到<code>\themes\next\source\css\_common\outline\header\site-meta.styl</code>文件。编辑修改<code>.brand&#123;&#125;</code>里<code>color</code>参数配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.brand</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">//  color: var(--brand-color);</span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span> !<span class="selector-tag">important</span>;</span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">  line-height: $font-size-title;</span><br><span class="line">  <span class="selector-tag">padding</span>: 0 40<span class="selector-tag">px</span>;</span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--brand-hover-color);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更改标题上下横线配色">更改标题上下横线配色</h2>
<p>找到<code>\themes\next\source\css\_schemes\Mist\_header.styl</code>。编辑修改<code>i&#123;&#125;</code>里的<code>background</code>参数配置</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-tag">i</span> &#123;</span><br><span class="line">   //background: var(--brand-color);</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#fc6423</span> !<span class="selector-tag">important</span>;</span><br><span class="line">   <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">   <span class="selector-tag">height</span>: 2<span class="selector-tag">px</span>;</span><br><span class="line">   <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】常用操作指令</title>
    <url>/2020/11/20/%E3%80%90Hexo%E3%80%91%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<p>欢迎使用 <a href="https://hexo.io/">Hexo</a>! 有关hexo的详细说明参见 <a href="https://hexo.io/docs/">documentation</a> 。 相关的问题解决参见 <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> 。</p>
<a id="more"></a>
<h2 id="快速入门">快速入门</h2>
<h3 id="创建新贴">创建新贴</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>详见: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="启动本地服务">启动本地服务</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>详见: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="生成静态页面">生成静态页面</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>详见: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="部署到远程">部署到远程</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>详见: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Jupyter】启动时有报错信息</title>
    <url>/2021/05/11/%E3%80%90Jupyter%E3%80%91%E5%90%AF%E5%8A%A8%E6%97%B6%E6%9C%89%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="说明">说明</h1>
<p>在升级jupyter到版本6.x以上时，在启动的时候会报很多行以下错误 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Config option &#96;template_path&#96; not recognized by &#96;LenvsLatexExporter&#96;. Did you mean one of: &#96;template_file, template_name, template_paths&#96;?</span><br></pre></td></tr></table></figure></p>
<h1 id="解决方案">解决方案</h1>
<p>使用VS Code依次打开python安装目录下的/lib/site-packages/ ('jupyter_contrib_nbextensions', 'jupyter_latex_envs' 及'latex_envs')子目录。</p>
<p>通过'Edit/Replace in Files'来查找'template_path'并替换为'template_paths'。</p>
<p>注意有的内容已经是template_paths，不需要修改。</p>
<h1 id="参考">参考</h1>
<p>1/ [jupyter代码自动补全插件、安装后出现警告“Config option <code>template_path</code> not recognized by <code>LenvsLatexExporter</code>”的解决方案](<a href="https://blog.csdn.net/DTFT_/article/details/111242118">jupyter代码自动补全插件、安装后出现警告"Config option not recognized by "的解决方案_Sun's Blog-CSDN博客</a>)</p>
<p>2/ <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions/issues/1529">Config option <code>template_path</code> not recognized by <code>LenvsLatexExporter</code>. Did you mean one of: <code>template_file, template_name, template_paths</code>? · Issue #1529 · ipython-contrib/jupyter_contrib_nbextensions (github.com)</a>)</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
        <category>jupyter</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>【Hexo】美化表格</title>
    <url>/2020/12/09/%E3%80%90Hexo%E3%80%91%E7%BE%8E%E5%8C%96%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>通过jupyter notebook导出的markdown文件中的表格过于丑陋，遂尝试对生成的表格内容进行美化。</p>
<a id="more"></a>
<h2 id="步骤">步骤</h2>
<h3 id="创建自定义的css文件">创建自定义的CSS文件</h3>
<p>在<code>themes/next/source/css/main.styl</code>中添加一行内容。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@import <span class="string">&quot;_custom/custom&quot;</span></span><br></pre></td></tr></table></figure>
<p>然后在<code>themes/next/source/css</code>目录下创建<code>_custom</code>文件夹。再进入该文件夹创建名为custom.styl的文件， 用它来配置自己需要的CSS样式。</p>
<h3 id="基本样式">基本样式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/*表格宽度*/</span></span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">65em</span>; <span class="comment">/*表格最大宽度，避免表格过宽*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*表格外边框设置*/</span></span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> auto; <span class="comment">/*外边距*/</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse; <span class="comment">/*使用单一线条的边框*/</span></span><br><span class="line">    <span class="attribute">empty-cells</span>: show; <span class="comment">/*单元格无内容依旧绘制边框*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>; <span class="comment">/*统一每一行的默认高度*/</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;  <span class="comment">/*行内字符大小*/</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>; <span class="comment">/*内部边框样式*/</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>; <span class="comment">/*内边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表头样式">表头样式</h3>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;  <span class="comment">/*表头字符大小*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: bold; <span class="comment">/*加粗*/</span></span><br><span class="line">    <span class="attribute">text-align</span>: center <span class="meta">!important</span>; <span class="comment">/*内容居中，加上 !important 避免被 Markdown 样式覆盖*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">158</span>,<span class="number">188</span>,<span class="number">226</span>,<span class="number">0.2</span>); <span class="comment">/*背景色*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="示例">示例</h3>
<table>
<thead>
<tr class="header">
<th></th>
<th></th>
<th>open</th>
<th>high</th>
<th>low</th>
<th>close</th>
<th>volume</th>
<th>amount</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>date</td>
<td>code</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>2020-11-16</td>
<td>000001</td>
<td>17.08</td>
<td>17.43</td>
<td>16.90</td>
<td>17.37</td>
<td>759856.0</td>
<td>1.308190e+09</td>
</tr>
<tr class="odd">
<td></td>
<td>000002</td>
<td>29.39</td>
<td>29.50</td>
<td>29.00</td>
<td>29.20</td>
<td>516576.0</td>
<td>1.509810e+09</td>
</tr>
<tr class="even">
<td></td>
<td>000004</td>
<td>31.15</td>
<td>31.46</td>
<td>30.11</td>
<td>30.61</td>
<td>72456.0</td>
<td>2.223127e+08</td>
</tr>
<tr class="odd">
<td></td>
<td>000005</td>
<td>2.68</td>
<td>2.70</td>
<td>2.65</td>
<td>2.69</td>
<td>64372.0</td>
<td>1.725762e+07</td>
</tr>
<tr class="even">
<td></td>
<td>000006</td>
<td>5.66</td>
<td>5.74</td>
<td>5.62</td>
<td>5.72</td>
<td>98253.0</td>
<td>5.592563e+07</td>
</tr>
<tr class="odd">
<td></td>
<td>000007</td>
<td>9.42</td>
<td>9.42</td>
<td>9.18</td>
<td>9.20</td>
<td>22567.0</td>
<td>2.094628e+07</td>
</tr>
<tr class="even">
<td></td>
<td>000008</td>
<td>2.72</td>
<td>2.74</td>
<td>2.70</td>
<td>2.73</td>
<td>171930.0</td>
<td>4.678304e+07</td>
</tr>
<tr class="odd">
<td></td>
<td>000009</td>
<td>7.71</td>
<td>7.88</td>
<td>7.66</td>
<td>7.82</td>
<td>320180.0</td>
<td>2.492149e+08</td>
</tr>
<tr class="even">
<td></td>
<td>000010</td>
<td>4.19</td>
<td>4.27</td>
<td>4.10</td>
<td>4.24</td>
<td>71661.0</td>
<td>3.004320e+07</td>
</tr>
<tr class="odd">
<td></td>
<td>000011</td>
<td>13.76</td>
<td>14.40</td>
<td>13.58</td>
<td>14.39</td>
<td>105639.0</td>
<td>1.489735e+08</td>
</tr>
</tbody>
</table>
<p>参考：</p>
<ol type="1">
<li><p><a href="https://hexo.imydl.tech/archives/6742.html">Hexo下表格的美化和优化</a></p></li>
<li><p><a href="https://www.jianshu.com/p/6c1651fe5374">完美解决：Hexo Next主题本地可预览CSS，但部署到网站CSS失效问题！</a></p></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【Markdown】Typora画流程图实践</title>
    <url>/2021/01/08/%E3%80%90Markdown%E3%80%91Typora%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p><code>Typrora</code>中使用了<code>Mermaid</code>来提供强劲的绘制流程图、时序图的功能。</p>
<h2 id="关于mermaid">关于Mermaid</h2>
<p>是一种简单的类似 Markdown 的脚本语言，通过 JavaScript 编程语言，将文本转换为图片。因此，真正实现画图功能的并不是 Typora 本身，它只是内置了对 Mermaid 的支持。</p>
<p><img src="https://s2.loli.net/2022/04/14/FiZR16eYrtTWm3g.png" /></p>
<h2 id="图形介绍">图形介绍</h2>
<h3 id="流程图flowchart">流程图(flowchart)</h3>
<p>主要语法说明：</p>
<p>graph - 表明是流程图</p>
<p>方向：</p>
<ul>
<li>TB - top to bottom</li>
<li>TD - top-down/ same as top to bottom</li>
<li>BT - bottom to top</li>
<li>RL - right to left</li>
<li>LR - left to right</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure>
<h3 id="时序图"><strong>时序图</strong></h3>
<p>语法解释：<code>-&gt;&gt;</code> 代表实线箭头，<code>--&gt;&gt;</code> 则代表虚线。</p>
<h1 id="参考">参考</h1>
<p>[1] <a href="https://mermaid-js.github.io/mermaid/#/">Mermaid:https://mermaid-js.github.io/mermaid/#/</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>typora</tag>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Pandas与numpy的方差计算</title>
    <url>/2021/07/16/%E3%80%90Python%E3%80%91Pandas%E4%B8%8Enumpy%E7%9A%84%E6%96%B9%E5%B7%AE%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="目的">目的</h1>
<p>方差在统计描述和概率分布中各有不同的定义，并有不同的公式。<br />
在统计描述中，方差用来计算每一个变量（观察值）与总体均数之间的差异。为避免出现离均差总和为零，离均差平方和受样本含量的影响，统计学采用平均离均差平方和来描述变量的变异程度。<br />
<code>总体方差计算公式</code>： <span class="math inline">\({\sigma}^2=\frac{\sum_{i=1}^{N}(X_i-\bar{\mu})}{N}\)</span><br />
其中<span class="math inline">\({\sigma}^2\)</span>为总体方差，<span class="math inline">\(X_i\)</span>为变量，<span class="math inline">\(\bar{\mu}\)</span>为总体均值，<span class="math inline">\(N\)</span>为总体例数。</p>
<p>实际工作中，总体均数难以得到时，应用样本统计量代替总体参数，经校正后，<br />
<code>样本方差计算公式</code>： <span class="math inline">\({S}^2=\frac{\sum_{i=1}^{N}(X_i-\bar{X})}{n-1}\)</span><br />
其中<span class="math inline">\({S}^2\)</span>为样本方差，<span class="math inline">\(X_i\)</span>为变量，<span class="math inline">\(\bar{X}\)</span>为样本均值，<span class="math inline">\(n\)</span>为样本例数。</p>
<a id="more"></a>
<h1 id="方差的计算">方差的计算</h1>
<h2 id="数据准备">数据准备</h2>
<p>取一定周期的沪深300指数(000300.SH)的每日行情数据，如：2019年全年。为了计算每日涨跌幅，故多取了2018年最后一个交易日的数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> QUANTAXIS <span class="keyword">as</span> QA</span><br><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span> </span><br><span class="line"></span><br><span class="line">index = QA.QA_fetch_index_day_adv(<span class="string">&#x27;000300&#x27;</span>,<span class="string">&#x27;2018-12-28&#x27;</span>,<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line">display(index.data)</span><br><span class="line"><span class="comment"># 计算每日涨跌幅</span></span><br><span class="line">returns_index = index.data.close.pct_change()</span><br><span class="line">display(returns_index)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
close
</th>
<th>
high
</th>
<th>
low
</th>
<th>
vol
</th>
<th>
amount
</th>
<th>
up_count
</th>
<th>
down_count
</th>
<th>
date_stamp
</th>
<th>
volume
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2018-12-28
</th>
<th>
000300
</th>
<td>
2994.80
</td>
<td>
3010.65
</td>
<td>
3024.35
</td>
<td>
2984.82
</td>
<td>
710537.0
</td>
<td>
7.814531e+10
</td>
<td>
200
</td>
<td>
81
</td>
<td>
1.545926e+09
</td>
<td>
710537.0
</td>
</tr>
<tr>
<th>
2019-01-02
</th>
<th>
000300
</th>
<td>
3017.07
</td>
<td>
2969.54
</td>
<td>
3018.78
</td>
<td>
2958.49
</td>
<td>
686630.0
</td>
<td>
7.610557e+10
</td>
<td>
70
</td>
<td>
216
</td>
<td>
1.546358e+09
</td>
<td>
686630.0
</td>
</tr>
<tr>
<th>
2019-01-03
</th>
<th>
000300
</th>
<td>
2963.02
</td>
<td>
2964.84
</td>
<td>
3000.44
</td>
<td>
2953.26
</td>
<td>
708671.0
</td>
<td>
7.666480e+10
</td>
<td>
145
</td>
<td>
142
</td>
<td>
1.546445e+09
</td>
<td>
708671.0
</td>
</tr>
<tr>
<th>
2019-01-04
</th>
<th>
000300
</th>
<td>
2940.19
</td>
<td>
3035.87
</td>
<td>
3036.81
</td>
<td>
2935.83
</td>
<td>
1033189.0
</td>
<td>
1.071410e+11
</td>
<td>
286
</td>
<td>
12
</td>
<td>
1.546531e+09
</td>
<td>
1033189.0
</td>
</tr>
<tr>
<th>
2019-01-07
</th>
<th>
000300
</th>
<td>
3055.15
</td>
<td>
3054.30
</td>
<td>
3061.75
</td>
<td>
3035.91
</td>
<td>
1011643.0
</td>
<td>
1.057039e+11
</td>
<td>
217
</td>
<td>
73
</td>
<td>
1.546790e+09
</td>
<td>
1011643.0
</td>
</tr>
<tr>
<th>
...
</th>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
2019-12-25
</th>
<th>
000300
</th>
<td>
3988.66
</td>
<td>
3990.87
</td>
<td>
4000.56
</td>
<td>
3976.36
</td>
<td>
949388.0
</td>
<td>
1.318965e+11
</td>
<td>
117
</td>
<td>
168
</td>
<td>
1.577203e+09
</td>
<td>
949388.0
</td>
</tr>
<tr>
<th>
2019-12-26
</th>
<th>
000300
</th>
<td>
3993.67
</td>
<td>
4025.99
</td>
<td>
4025.99
</td>
<td>
3993.54
</td>
<td>
1088606.0
</td>
<td>
1.408150e+11
</td>
<td>
236
</td>
<td>
53
</td>
<td>
1.577290e+09
</td>
<td>
1088606.0
</td>
</tr>
<tr>
<th>
2019-12-27
</th>
<th>
000300
</th>
<td>
4029.25
</td>
<td>
4022.03
</td>
<td>
4066.80
</td>
<td>
4019.72
</td>
<td>
1509264.0
</td>
<td>
1.950904e+11
</td>
<td>
116
</td>
<td>
173
</td>
<td>
1.577376e+09
</td>
<td>
1509264.0
</td>
</tr>
<tr>
<th>
2019-12-30
</th>
<th>
000300
</th>
<td>
4015.52
</td>
<td>
4081.63
</td>
<td>
4083.69
</td>
<td>
4001.50
</td>
<td>
1559714.0
</td>
<td>
2.168147e+11
</td>
<td>
241
</td>
<td>
53
</td>
<td>
1.577635e+09
</td>
<td>
1559714.0
</td>
</tr>
<tr>
<th>
2019-12-31
</th>
<th>
000300
</th>
<td>
4077.75
</td>
<td>
4096.58
</td>
<td>
4098.14
</td>
<td>
4069.01
</td>
<td>
1232642.0
</td>
<td>
1.731193e+11
</td>
<td>
189
</td>
<td>
95
</td>
<td>
1.577722e+09
</td>
<td>
1232642.0
</td>
</tr>
</tbody>
</table>
<p>
245 rows × 10 columns
</p>
</div>
<pre><code>date        code  
2018-12-28  000300         NaN
2019-01-02  000300   -0.013655
2019-01-03  000300   -0.001583
2019-01-04  000300    0.023957
2019-01-07  000300    0.006071
                        ...   
2019-12-25  000300   -0.000523
2019-12-26  000300    0.008800
2019-12-27  000300   -0.000984
2019-12-30  000300    0.014818
2019-12-31  000300    0.003663
Name: close, Length: 245, dtype: float64</code></pre>
<h2 id="使用numpy计算">使用numpy计算</h2>
<p>numpy 中计算的方差就是总体方差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.var(returns_index)</span><br></pre></td></tr></table></figure>
<pre><code>0.00015577588074696037</code></pre>
<h2 id="使用pandas计算">使用pandas计算</h2>
<p>pandas 中计算的方差为样本方差。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">returns_index.var()</span><br></pre></td></tr></table></figure>
<pre><code>0.0001564169337541495</code></pre>
<h1 id="小结">小结</h1>
<p>在计算方差时，使用numpy和pandas会得到不一样的计算结果，需要根据实际需要样本方差还是总体方差来决定使用何种方式。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】Pandas之dataframe与series的协方差计算</title>
    <url>/2021/07/16/%E3%80%90Python%E3%80%91Pandas%E4%B9%8Bdataframe%E4%B8%8Eseries%E7%9A%84%E5%8D%8F%E6%96%B9%E5%B7%AE%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="目的">目的</h1>
<h2 id="什么是协方差">什么是协方差</h2>
<p><code>协方差（Covariance）</code>在概率论和统计学中用于衡量两个变量的总体误差。而方差是协方差的一种特殊情况，即当两个变量是相同的情况。 协方差表示的是两个变量的总体的误差，这与只表示一个变量误差的方差不同。 如果两个变量的变化趋势一致，也就是说如果其中一个大于自身的期望值，另外一个也大于自身的期望值，那么两个变量之间的协方差就是正值。 如果两个变量的变化趋势相反，即其中一个大于自身的期望值，另外一个却小于自身的期望值，那么两个变量之间的协方差就是负值。<br />
<span class="math inline">\(Cov(X,Y) = E[(X-E(X))(Y-E(Y))]\)</span></p>
<a id="more"></a>
<h2 id="协方差的性质">协方差的性质</h2>
<ol type="1">
<li><span class="math inline">\(Cov(X,Y)=Cov(Y,X)\)</span><br />
</li>
<li><span class="math inline">\(Cov(aX,bY)=abCov(X,Y)\)</span>，（a，b是常数）<br />
</li>
<li><span class="math inline">\(Cov(X_1+X_2,Y)=Cov(X_1,Y)+Cov(X_2,Y)\)</span><br />
</li>
<li><span class="math inline">\(Cov(X+a,Y+b)=Cov(X,Y)\)</span></li>
</ol>
<h1 id="协方差的计算">协方差的计算</h1>
<p>可以使用<code>pandas</code>,<code>numpy</code>来计算两个变量的协方差，下面举例分别说明</p>
<h2 id="获取数据">获取数据</h2>
<p>分别取<code>顺丰控股(002352.SZ)</code>，<code>沪深300指数(000300.SH)</code>自2018年12月28日至2019年12月31日的数据，这里是为了计算每日涨跌幅，故多取了2018年最后一个交易日的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> QUANTAXIS <span class="keyword">as</span> QA</span><br><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span> </span><br><span class="line"></span><br><span class="line">stock = QA.QA_fetch_stock_day_adv(<span class="string">&#x27;002352&#x27;</span>,<span class="string">&#x27;2018-12-28&#x27;</span>,<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line">index = QA.QA_fetch_index_day_adv(<span class="string">&#x27;000300&#x27;</span>,<span class="string">&#x27;2018-12-28&#x27;</span>,<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line">display(stock.data)</span><br><span class="line">display(index.data)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2018-12-28
</th>
<th>
002352
</th>
<td>
32.75
</td>
<td>
33.02
</td>
<td>
32.50
</td>
<td>
32.75
</td>
<td>
55314.0
</td>
<td>
181019008.0
</td>
</tr>
<tr>
<th>
2019-01-02
</th>
<th>
002352
</th>
<td>
32.50
</td>
<td>
32.71
</td>
<td>
32.21
</td>
<td>
32.71
</td>
<td>
16457.0
</td>
<td>
53470292.0
</td>
</tr>
<tr>
<th>
2019-01-03
</th>
<th>
002352
</th>
<td>
32.63
</td>
<td>
32.88
</td>
<td>
32.23
</td>
<td>
32.73
</td>
<td>
22575.0
</td>
<td>
73397384.0
</td>
</tr>
<tr>
<th>
2019-01-04
</th>
<th>
002352
</th>
<td>
32.59
</td>
<td>
32.99
</td>
<td>
32.11
</td>
<td>
32.95
</td>
<td>
36217.0
</td>
<td>
118465936.0
</td>
</tr>
<tr>
<th>
2019-01-07
</th>
<th>
002352
</th>
<td>
32.88
</td>
<td>
32.91
</td>
<td>
32.62
</td>
<td>
32.80
</td>
<td>
31058.0
</td>
<td>
101845472.0
</td>
</tr>
<tr>
<th>
...
</th>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
2019-12-25
</th>
<th>
002352
</th>
<td>
38.39
</td>
<td>
38.45
</td>
<td>
37.73
</td>
<td>
37.90
</td>
<td>
70724.0
</td>
<td>
268576480.0
</td>
</tr>
<tr>
<th>
2019-12-26
</th>
<th>
002352
</th>
<td>
38.00
</td>
<td>
38.38
</td>
<td>
37.52
</td>
<td>
37.75
</td>
<td>
72621.0
</td>
<td>
274198528.0
</td>
</tr>
<tr>
<th>
2019-12-27
</th>
<th>
002352
</th>
<td>
37.75
</td>
<td>
38.03
</td>
<td>
37.38
</td>
<td>
37.51
</td>
<td>
97280.0
</td>
<td>
367301696.0
</td>
</tr>
<tr>
<th>
2019-12-30
</th>
<th>
002352
</th>
<td>
37.52
</td>
<td>
37.87
</td>
<td>
37.00
</td>
<td>
37.70
</td>
<td>
106665.0
</td>
<td>
399623008.0
</td>
</tr>
<tr>
<th>
2019-12-31
</th>
<th>
002352
</th>
<td>
37.80
</td>
<td>
37.85
</td>
<td>
37.00
</td>
<td>
37.19
</td>
<td>
78659.0
</td>
<td>
292803712.0
</td>
</tr>
</tbody>
</table>
<p>
245 rows × 6 columns
</p>
</div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
close
</th>
<th>
high
</th>
<th>
low
</th>
<th>
vol
</th>
<th>
amount
</th>
<th>
up_count
</th>
<th>
down_count
</th>
<th>
date_stamp
</th>
<th>
volume
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2018-12-28
</th>
<th>
000300
</th>
<td>
2994.80
</td>
<td>
3010.65
</td>
<td>
3024.35
</td>
<td>
2984.82
</td>
<td>
710537.0
</td>
<td>
7.814531e+10
</td>
<td>
200
</td>
<td>
81
</td>
<td>
1.545926e+09
</td>
<td>
710537.0
</td>
</tr>
<tr>
<th>
2019-01-02
</th>
<th>
000300
</th>
<td>
3017.07
</td>
<td>
2969.54
</td>
<td>
3018.78
</td>
<td>
2958.49
</td>
<td>
686630.0
</td>
<td>
7.610557e+10
</td>
<td>
70
</td>
<td>
216
</td>
<td>
1.546358e+09
</td>
<td>
686630.0
</td>
</tr>
<tr>
<th>
2019-01-03
</th>
<th>
000300
</th>
<td>
2963.02
</td>
<td>
2964.84
</td>
<td>
3000.44
</td>
<td>
2953.26
</td>
<td>
708671.0
</td>
<td>
7.666480e+10
</td>
<td>
145
</td>
<td>
142
</td>
<td>
1.546445e+09
</td>
<td>
708671.0
</td>
</tr>
<tr>
<th>
2019-01-04
</th>
<th>
000300
</th>
<td>
2940.19
</td>
<td>
3035.87
</td>
<td>
3036.81
</td>
<td>
2935.83
</td>
<td>
1033189.0
</td>
<td>
1.071410e+11
</td>
<td>
286
</td>
<td>
12
</td>
<td>
1.546531e+09
</td>
<td>
1033189.0
</td>
</tr>
<tr>
<th>
2019-01-07
</th>
<th>
000300
</th>
<td>
3055.15
</td>
<td>
3054.30
</td>
<td>
3061.75
</td>
<td>
3035.91
</td>
<td>
1011643.0
</td>
<td>
1.057039e+11
</td>
<td>
217
</td>
<td>
73
</td>
<td>
1.546790e+09
</td>
<td>
1011643.0
</td>
</tr>
<tr>
<th>
...
</th>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
2019-12-25
</th>
<th>
000300
</th>
<td>
3988.66
</td>
<td>
3990.87
</td>
<td>
4000.56
</td>
<td>
3976.36
</td>
<td>
949388.0
</td>
<td>
1.318965e+11
</td>
<td>
117
</td>
<td>
168
</td>
<td>
1.577203e+09
</td>
<td>
949388.0
</td>
</tr>
<tr>
<th>
2019-12-26
</th>
<th>
000300
</th>
<td>
3993.67
</td>
<td>
4025.99
</td>
<td>
4025.99
</td>
<td>
3993.54
</td>
<td>
1088606.0
</td>
<td>
1.408150e+11
</td>
<td>
236
</td>
<td>
53
</td>
<td>
1.577290e+09
</td>
<td>
1088606.0
</td>
</tr>
<tr>
<th>
2019-12-27
</th>
<th>
000300
</th>
<td>
4029.25
</td>
<td>
4022.03
</td>
<td>
4066.80
</td>
<td>
4019.72
</td>
<td>
1509264.0
</td>
<td>
1.950904e+11
</td>
<td>
116
</td>
<td>
173
</td>
<td>
1.577376e+09
</td>
<td>
1509264.0
</td>
</tr>
<tr>
<th>
2019-12-30
</th>
<th>
000300
</th>
<td>
4015.52
</td>
<td>
4081.63
</td>
<td>
4083.69
</td>
<td>
4001.50
</td>
<td>
1559714.0
</td>
<td>
2.168147e+11
</td>
<td>
241
</td>
<td>
53
</td>
<td>
1.577635e+09
</td>
<td>
1559714.0
</td>
</tr>
<tr>
<th>
2019-12-31
</th>
<th>
000300
</th>
<td>
4077.75
</td>
<td>
4096.58
</td>
<td>
4098.14
</td>
<td>
4069.01
</td>
<td>
1232642.0
</td>
<td>
1.731193e+11
</td>
<td>
189
</td>
<td>
95
</td>
<td>
1.577722e+09
</td>
<td>
1232642.0
</td>
</tr>
</tbody>
</table>
<p>
245 rows × 10 columns
</p>
</div>
<p>每日涨跌幅的计算公式为：<span class="math inline">\(\frac{当日收盘价-前日收盘价}{前日收盘价}\)</span><br />
可以有两种方式计算</p>
<ul>
<li>直接计算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">returns_stock = (stock.data[<span class="string">&#x27;close&#x27;</span>]-stock.data[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>))/stock.data[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">returns_index = (index.data[<span class="string">&#x27;close&#x27;</span>]-index.data[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>))/index.data[<span class="string">&#x27;close&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line">display(returns_stock,returns_index)</span><br></pre></td></tr></table></figure>
<pre><code>date        code  
2018-12-28  002352         NaN
2019-01-02  002352   -0.001221
2019-01-03  002352    0.000611
2019-01-04  002352    0.006722
2019-01-07  002352   -0.004552
                        ...   
2019-12-25  002352   -0.012764
2019-12-26  002352   -0.003958
2019-12-27  002352   -0.006358
2019-12-30  002352    0.005065
2019-12-31  002352   -0.013528
Name: close, Length: 245, dtype: float64



date        code  
2018-12-28  000300         NaN
2019-01-02  000300   -0.013655
2019-01-03  000300   -0.001583
2019-01-04  000300    0.023957
2019-01-07  000300    0.006071
                        ...   
2019-12-25  000300   -0.000523
2019-12-26  000300    0.008800
2019-12-27  000300   -0.000984
2019-12-30  000300    0.014818
2019-12-31  000300    0.003663
Name: close, Length: 245, dtype: float64</code></pre>
<ul>
<li>使用<code>pct_change()</code>计算</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">returns_stock = stock.data.close.pct_change()</span><br><span class="line">returns_index = index.data.close.pct_change()</span><br><span class="line">display(returns_stock,returns_index)</span><br></pre></td></tr></table></figure>
<pre><code>date        code  
2018-12-28  002352         NaN
2019-01-02  002352   -0.001221
2019-01-03  002352    0.000611
2019-01-04  002352    0.006722
2019-01-07  002352   -0.004552
                        ...   
2019-12-25  002352   -0.012764
2019-12-26  002352   -0.003958
2019-12-27  002352   -0.006358
2019-12-30  002352    0.005065
2019-12-31  002352   -0.013528
Name: close, Length: 245, dtype: float64



date        code  
2018-12-28  000300         NaN
2019-01-02  000300   -0.013655
2019-01-03  000300   -0.001583
2019-01-04  000300    0.023957
2019-01-07  000300    0.006071
                        ...   
2019-12-25  000300   -0.000523
2019-12-26  000300    0.008800
2019-12-27  000300   -0.000984
2019-12-30  000300    0.014818
2019-12-31  000300    0.003663
Name: close, Length: 245, dtype: float64</code></pre>
<h2 id="使用numpy计算协方差">使用<code>numpy</code>计算协方差</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covr_matrix = np.cov(returns_stock, returns_index)</span><br><span class="line">print(covr_matrix)</span><br></pre></td></tr></table></figure>
<pre><code>[[nan nan]
 [nan nan]]</code></pre>
<p>使用numpy计算协方差时，不会自动排除<code>NaN</code>的数据，所以需要手动清洗数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covr_matrix = np.cov(returns_stock[<span class="number">1</span>:], returns_index[<span class="number">1</span>:])</span><br><span class="line">print(covr_matrix)</span><br></pre></td></tr></table></figure>
<pre><code>[[3.19837928e-04 9.71284226e-05]
 [9.71284226e-05 1.56416934e-04]]</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covr = covr_matrix[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">print(covr)</span><br></pre></td></tr></table></figure>
<pre><code>9.712842264272448e-05</code></pre>
<h2 id="使用pandas计算协方差">使用<code>pandas</code>计算协方差</h2>
<p>因为取出的数据是多含多重索引的series数据，在使用<code>pandas.series.cov()</code>进行协方差计算时，如果索引不一致，会出现计算结果为<code>nan</code>的情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covr = returns_stock.cov(returns_index)</span><br><span class="line">print(covr)</span><br></pre></td></tr></table></figure>
<pre><code>nan</code></pre>
<p>需要先去除多重索引，办法有多种，如使用<code>droplevel()</code>,<code>unstack()</code>等，以下分别举例说明。</p>
<ul>
<li>使用<code>droplevel()</code>来完成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">covr = returns_stock.droplevel(<span class="number">1</span>).cov(returns_index.droplevel(<span class="number">1</span>))</span><br><span class="line">print(covr)</span><br></pre></td></tr></table></figure>
<pre><code>9.712842264272448e-05</code></pre>
<ul>
<li>使用<code>unstack()</code>来完成</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.concat([returns_stock.unstack(), returns_index.unstack()],axis=<span class="number">1</span>)</span><br><span class="line">display(df)</span><br><span class="line">df.cov()</span><br><span class="line">covr = df.cov().loc[<span class="string">&#x27;002352&#x27;</span>,<span class="string">&#x27;000300&#x27;</span>]</span><br><span class="line">print(covr)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
code
</th>
<th>
002352
</th>
<th>
000300
</th>
</tr>
<tr>
<th>
date
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
2018-12-28
</th>
<td>
NaN
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
2019-01-02
</th>
<td>
-0.001221
</td>
<td>
-0.013655
</td>
</tr>
<tr>
<th>
2019-01-03
</th>
<td>
0.000611
</td>
<td>
-0.001583
</td>
</tr>
<tr>
<th>
2019-01-04
</th>
<td>
0.006722
</td>
<td>
0.023957
</td>
</tr>
<tr>
<th>
2019-01-07
</th>
<td>
-0.004552
</td>
<td>
0.006071
</td>
</tr>
<tr>
<th>
...
</th>
<td>
...
</td>
<td>
...
</td>
</tr>
<tr>
<th>
2019-12-25
</th>
<td>
-0.012764
</td>
<td>
-0.000523
</td>
</tr>
<tr>
<th>
2019-12-26
</th>
<td>
-0.003958
</td>
<td>
0.008800
</td>
</tr>
<tr>
<th>
2019-12-27
</th>
<td>
-0.006358
</td>
<td>
-0.000984
</td>
</tr>
<tr>
<th>
2019-12-30
</th>
<td>
0.005065
</td>
<td>
0.014818
</td>
</tr>
<tr>
<th>
2019-12-31
</th>
<td>
-0.013528
</td>
<td>
0.003663
</td>
</tr>
</tbody>
</table>
<p>
245 rows × 2 columns
</p>
</div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
code
</th>
<th>
002352
</th>
<th>
000300
</th>
</tr>
<tr>
<th>
code
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th>
002352
</th>
<td>
0.000320
</td>
<td>
0.000097
</td>
</tr>
<tr>
<th>
000300
</th>
<td>
0.000097
</td>
<td>
0.000156
</td>
</tr>
</tbody>
</table>
</div>
<pre><code>9.71284226427245e-05</code></pre>
<p>使用<code>pandas.dataframe.cov()</code>或<code>panadas.series.cov()</code>时,会自动排除<code>NaN</code>的数据，这一点与用numpy来计算是有区别的。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】pandas dataframe输出格式对齐美化的思路</title>
    <url>/2021/05/14/%E3%80%90Python%E3%80%91pandas%20dataframe%E8%BE%93%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%AF%B9%E9%BD%90%E7%BE%8E%E5%8C%96%E7%9A%84%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="需求">需求</h1>
<p>在jupyter中可以直接使用用dataframe的名字输出美观的表格形式，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QUANTAXIS <span class="keyword">as</span> QA</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">通过本地数据库获取股票日线数据：</span></span><br><span class="line"><span class="string">QA.QA_fetch_stock_day_adv(</span></span><br><span class="line"><span class="string">    code,</span></span><br><span class="line"><span class="string">    start=&#x27;all&#x27;,</span></span><br><span class="line"><span class="string">    end=None,</span></span><br><span class="line"><span class="string">    if_drop_index=True,</span></span><br><span class="line"><span class="string">    collections=Collection(Database(MongoClient(host=[&#x27;localhost:27017&#x27;], document_class=dict, tz_aware=False, connect=True), &#x27;quantaxis&#x27;), &#x27;stock_day&#x27;),</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data=QA.QA_fetch_stock_day_adv([<span class="string">&quot;002003&quot;</span>,<span class="string">&#x27;300999&#x27;</span>,<span class="string">&#x27;603899&#x27;</span>],<span class="string">&#x27;2021-05-12&#x27;</span>,<span class="string">&#x27;2021-05-13&#x27;</span>)</span><br><span class="line">df = data.data</span><br><span class="line">df</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="3" valign="top">
2021-05-12
</th>
<th>
002003
</th>
<td>
7.32
</td>
<td>
7.51
</td>
<td>
7.28
</td>
<td>
7.48
</td>
<td>
80536.0
</td>
<td>
5.980900e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
76.12
</td>
<td>
76.75
</td>
<td>
75.11
</td>
<td>
76.20
</td>
<td>
146625.0
</td>
<td>
1.114936e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
86.80
</td>
<td>
87.85
</td>
<td>
85.71
</td>
<td>
86.60
</td>
<td>
19172.0
</td>
<td>
1.656046e+08
</td>
</tr>
<tr>
<th rowspan="3" valign="top">
2021-05-13
</th>
<th>
002003
</th>
<td>
7.44
</td>
<td>
7.63
</td>
<td>
7.34
</td>
<td>
7.55
</td>
<td>
98429.0
</td>
<td>
7.403393e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
75.00
</td>
<td>
75.60
</td>
<td>
74.04
</td>
<td>
74.20
</td>
<td>
144742.0
</td>
<td>
1.080974e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
85.71
</td>
<td>
88.12
</td>
<td>
85.10
</td>
<td>
87.59
</td>
<td>
14734.0
</td>
<td>
1.280291e+08
</td>
</tr>
</tbody>
</table>
</div>
<p>在使用<code>print</code>输出时的结果是这样的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df)</span><br></pre></td></tr></table></figure>
<pre><code>                    open   high    low  close    volume        amount
date       code                                                      
2021-05-12 002003   7.32   7.51   7.28   7.48   80536.0  5.980900e+07
           300999  76.12  76.75  75.11  76.20  146625.0  1.114936e+09
           603899  86.80  87.85  85.71  86.60   19172.0  1.656046e+08
2021-05-13 002003   7.44   7.63   7.34   7.55   98429.0  7.403393e+07
           300999  75.00  75.60  74.04  74.20  144742.0  1.080974e+09
           603899  85.71  88.12  85.10  87.59   14734.0  1.280291e+08</code></pre>
<p>而当DataFrame中存在中英文混合的时候，会出现print()打印无法对齐的情况，导致输出的结果都没有对齐，十分不美观。如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df1 = df</span><br><span class="line">df1.columns = [<span class="string">&quot;开盘价&quot;</span>, <span class="string">&quot;最高价&quot;</span>, <span class="string">&quot;最低价&quot;</span>, <span class="string">&quot;收盘价&quot;</span>, <span class="string">&quot;成交量&quot;</span>, <span class="string">&quot;成交金额&quot;</span>]</span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure>
<pre><code>                     开盘价    最高价    最低价    收盘价       成交量          成交金额
date       code                                                      
2021-05-12 002003   7.32   7.51   7.28   7.48   80536.0  5.980900e+07
           300999  76.12  76.75  75.11  76.20  146625.0  1.114936e+09
           603899  86.80  87.85  85.71  86.60   19172.0  1.656046e+08
2021-05-13 002003   7.44   7.63   7.34   7.55   98429.0  7.403393e+07
           300999  75.00  75.60  74.04  74.20  144742.0  1.080974e+09
           603899  85.71  88.12  85.10  87.59   14734.0  1.280291e+08</code></pre>
<p>那么问题来了。 1. 有没有办法使用<code>print</code>输出中英文混合的dataframe可以对齐美观？ 2. 在执行完整的python代码时(非jupyter)，有办法象jupyter中一样输出美观的dataframe表格么？</p>
<h1 id="解决办法">解决办法</h1>
<h2 id="问题1-有没有办法使用print输出中英文混合的dataframe可以对齐美观">问题1 有没有办法使用print输出中英文混合的dataframe可以对齐美观？</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.ambiguous_as_wide&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.unicode.east_asian_width&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">pd.set_option(<span class="string">&#x27;display.width&#x27;</span>, <span class="number">180</span>)                       <span class="comment"># 设置打印宽度(**重要**)</span></span><br><span class="line">print(df1)</span><br></pre></td></tr></table></figure>
<pre><code>                   开盘价  最高价  最低价  收盘价    成交量      成交金额
date       code                                                          
2021-05-12 002003    7.32    7.51    7.28    7.48   80536.0  5.980900e+07
           300999   76.12   76.75   75.11   76.20  146625.0  1.114936e+09
           603899   86.80   87.85   85.71   86.60   19172.0  1.656046e+08
2021-05-13 002003    7.44    7.63    7.34    7.55   98429.0  7.403393e+07
           300999   75.00   75.60   74.04   74.20  144742.0  1.080974e+09
           603899   85.71   88.12   85.10   87.59   14734.0  1.280291e+08</code></pre>
<h2 id="问题2-在执行完整的python代码时非jupyter有办法象jupyter中一样输出美观的dataframe表格么">问题2 在执行完整的python代码时(非jupyter)，有办法象jupyter中一样输出美观的dataframe表格么？</h2>
<p>使用<code>IPython.display</code>来替换<code>print</code>的输出效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">display(df)</span><br><span class="line">display(df1)</span><br></pre></td></tr></table></figure>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
开盘价
</th>
<th>
最高价
</th>
<th>
最低价
</th>
<th>
收盘价
</th>
<th>
成交量
</th>
<th>
成交金额
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="3" valign="top">
2021-05-12
</th>
<th>
002003
</th>
<td>
7.32
</td>
<td>
7.51
</td>
<td>
7.28
</td>
<td>
7.48
</td>
<td>
80536.0
</td>
<td>
5.980900e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
76.12
</td>
<td>
76.75
</td>
<td>
75.11
</td>
<td>
76.20
</td>
<td>
146625.0
</td>
<td>
1.114936e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
86.80
</td>
<td>
87.85
</td>
<td>
85.71
</td>
<td>
86.60
</td>
<td>
19172.0
</td>
<td>
1.656046e+08
</td>
</tr>
<tr>
<th rowspan="3" valign="top">
2021-05-13
</th>
<th>
002003
</th>
<td>
7.44
</td>
<td>
7.63
</td>
<td>
7.34
</td>
<td>
7.55
</td>
<td>
98429.0
</td>
<td>
7.403393e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
75.00
</td>
<td>
75.60
</td>
<td>
74.04
</td>
<td>
74.20
</td>
<td>
144742.0
</td>
<td>
1.080974e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
85.71
</td>
<td>
88.12
</td>
<td>
85.10
</td>
<td>
87.59
</td>
<td>
14734.0
</td>
<td>
1.280291e+08
</td>
</tr>
</tbody>
</table>
</div>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
开盘价
</th>
<th>
最高价
</th>
<th>
最低价
</th>
<th>
收盘价
</th>
<th>
成交量
</th>
<th>
成交金额
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="3" valign="top">
2021-05-12
</th>
<th>
002003
</th>
<td>
7.32
</td>
<td>
7.51
</td>
<td>
7.28
</td>
<td>
7.48
</td>
<td>
80536.0
</td>
<td>
5.980900e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
76.12
</td>
<td>
76.75
</td>
<td>
75.11
</td>
<td>
76.20
</td>
<td>
146625.0
</td>
<td>
1.114936e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
86.80
</td>
<td>
87.85
</td>
<td>
85.71
</td>
<td>
86.60
</td>
<td>
19172.0
</td>
<td>
1.656046e+08
</td>
</tr>
<tr>
<th rowspan="3" valign="top">
2021-05-13
</th>
<th>
002003
</th>
<td>
7.44
</td>
<td>
7.63
</td>
<td>
7.34
</td>
<td>
7.55
</td>
<td>
98429.0
</td>
<td>
7.403393e+07
</td>
</tr>
<tr>
<th>
300999
</th>
<td>
75.00
</td>
<td>
75.60
</td>
<td>
74.04
</td>
<td>
74.20
</td>
<td>
144742.0
</td>
<td>
1.080974e+09
</td>
</tr>
<tr>
<th>
603899
</th>
<td>
85.71
</td>
<td>
88.12
</td>
<td>
85.10
</td>
<td>
87.59
</td>
<td>
14734.0
</td>
<td>
1.280291e+08
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="问题3-输出dataframe数据时可以不输出索引号么">问题3 输出dataframe数据时，可以不输出索引号么？</h3>
<p><code>python 2.7</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> df.to_string(index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p><code>python 3</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(df.to_string(index=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>dataframe</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】使用PYQT5来构建持仓盈亏监控</title>
    <url>/2021/05/14/%E3%80%90Python%E3%80%91%E4%BD%BF%E7%94%A8PYQT5%E6%9D%A5%E6%9E%84%E5%BB%BA%E6%8C%81%E4%BB%93%E7%9B%88%E4%BA%8F%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h1 id="目的">目的</h1>
<p>通过win10的通知来监控持仓盈亏，会在托盘上累积太多的图标，而且经常受到专注助手影响，效果不是太理想。所以尝试利用PyQt5来构建一个监控系统，实现类似雪球网页上同样的功能。</p>
<a id="more"></a>
<h1 id="安装pyqt5">安装PyQt5</h1>
<h2 id="安装pyqt5-1">安装PyQt5</h2>
<ol type="1">
<li><p>pip安装 &gt;pip install PyQt5</p></li>
<li><p>官网下载文件安装<br />
下载地址：<a href="https://pypi.org/project/PyQt5/#files">PyQt下载官网</a> <img src="https://s2.loli.net/2022/04/14/ATIvDBfZr6N1WL5.png" /> 安装方法：打开命令行，通过命令行进入到下载的whl文件所在的文件夹，输入如下命令，安装即可。 &gt;pip install PyQt5-5.15.4-cp36.cp37.cp38.cp39-none-win_amd64.whl</p></li>
</ol>
<h2 id="安装pyqt5-tools">安装PyQt5-tools</h2>
<p>PyQt5-tools里含有图形界面开发工具QtDesigner及国际化翻译工具Liguist。 1. pip安装 &gt;pip install PyQt5-tools</p>
<ol start="2" type="1">
<li>官网下载文件安装<br />
下载地址：<a href="https://pypi.org/project/pyqt5-tools/#files">PyQt下载官网</a> <img src="https://s2.loli.net/2022/04/14/KNDVktjGFofTnZ3.png" /> 安装方法：打开命令行，通过命令行进入到下载的whl文件所在的文件夹，输入如下命令，安装即可。 &gt;pip install pyqt5_tools-5.15.2.3.0.2-py3-none-any.whl</li>
</ol>
<p>在系统中加入以下环境变量 &gt;d:-packages_tools<br />
</p>
<h2 id="与vscode集成">与VScode集成</h2>
<ol type="1">
<li>安装pyqt integration插件 <img src="https://s2.loli.net/2022/04/14/vS2MUFCL8oNT1Kl.png" /> 对pyqt integration插件进行配置，主要是pyuic5及qt designer的路径 <img src="https://s2.loli.net/2022/04/14/W4FUgXOnvAVjqI5.png" /></li>
</ol>
<h2 id="界面设计">界面设计</h2>
<p>用小窗口来实现监控。</p>
<h3 id="术语">术语</h3>
<ul>
<li>布局<br />
采用了布局之后能够让我们的程序在使用上更加美观，不会随着窗体的大小发生改变而改变，符合我们的使用习惯。在PyQt5中，有多种布局的方式供我们选择，比较常用的布局有以下几种：
<ul>
<li>表单布局：QFormLayout</li>
<li>网格布局：QGridLayout</li>
<li>水平排列布局：QHBoxLayout</li>
<li>垂直排列布局：QVBoxLayout</li>
</ul></li>
</ul>
<p>比较详细的说明可以参考<a href="https://zhuanlan.zhihu.com/p/28559136">PyQt5系列教程（6）：布局</a></p>
<ul>
<li>MVC模式 MVC 模式 指 Model-View-Controller（模型-视图-控制器） 模式。这种模式多应用于应用程序的分层开发。
<ul>
<li>Model是一个数据模型、一个虚拟的东西，显示不出来的，如果我们要把这些数据显示出来，就需要使用view。</li>
<li>View：用来显示Model这种数据</li>
<li>Controler：如果我们要编辑数据，就需要使用controler,不使用controler，我们只能对数据进行查看不能编辑</li>
</ul></li>
</ul>
<h3 id="使用qtdesigner来设计界面">使用QtDesigner来设计界面</h3>
<ol type="1">
<li>初始界面 初始界面设计如下： <img src="https://s2.loli.net/2022/04/14/zcTQvBmEta5WwuP.png" /></li>
</ol>
<p>相应的组件及布局如下： <img src="https://s2.loli.net/2022/04/14/Pb6hNWke3I9Lngf.png" /></p>
<p>计划使用QLabel来显示总的持仓盈亏情况，用Qtableview来显示具体的股票信息， Qlabel使用<code>gridLayout</code>, Qtableview使用<code>verticalLayout</code>。</p>
<ol start="2" type="1">
<li>界面美化 在自定义的View类中写入代码进行美化。</li>
</ol>
<ul>
<li>去除丑陋的边框</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setWindowFlag(QtCore.Qt.FramelessWindowHint) </span><br></pre></td></tr></table></figure>
<ul>
<li>增加关闭及最小化按钮（以MacOS的样式） 用pyqtSlot装饰器来实现点击按钮关闭和最小化的操作。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.CloseButton.setFixedSize(<span class="number">15</span>,<span class="number">15</span>) </span><br><span class="line">self.MinButton.setFixedSize(<span class="number">15</span>,<span class="number">15</span>) </span><br><span class="line">self.CloseButton.setStyleSheet(<span class="string">&quot;QPushButton&#123;background:#F76677;border-radius:7px;&#125;QPushButton:hover&#123;background:red;&#125;&quot;</span>)</span><br><span class="line">self.MinButton.setStyleSheet(<span class="string">&quot;QPushButton&#123;background:#6DDF6D;border-radius:7px;&#125;QPushButton:hover&#123;background:green;&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@pyqtSlot()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_CloseButton_clicked</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    关闭窗口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@pyqtSlot()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_MinButton_clicked</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    最小化窗口</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.showMinimized()    </span><br></pre></td></tr></table></figure>
<ul>
<li>针对盈亏对显示结果使用不同颜色</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">float</span>(self.label_4.text().split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">    self.label_2.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#01D68A;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line">    self.label_4.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#01D68A;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.label_2.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#FF0018;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line">    self.label_4.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#FF0018;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">float</span>(self.label_6.text().split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">    self.label_6.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#01D68A;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.label_6.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#FF0018;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">float</span>(self.label_8.text().split(<span class="string">&#x27;(&#x27;</span>)[<span class="number">0</span>]) &lt; <span class="number">0</span>:</span><br><span class="line">    self.label_8.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#01D68A;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.label_8.setStyleSheet(<span class="string">&quot;QLabel&#123;color:#FF0018;font-size:15px;font-weight:bold;font-family:Hack;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>Qtableview的表头使用与窗口同样的背景色以及文字左对齐</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.tableView.setStyleSheet(<span class="string">&quot;border-width: 0px; border-style: solid;&quot;</span>)</span><br><span class="line">self.tableView.horizontalHeader().setStyleSheet(<span class="string">&quot;QHeaderView::section&#123;Background-color:#454545;border-radius: 0px;&#125;&quot;</span>)</span><br><span class="line">self.tableView_2.setStyleSheet(<span class="string">&quot;border-width: 0px; border-style: solid;&quot;</span>)</span><br><span class="line">self.tableView_2.horizontalHeader().setStyleSheet(<span class="string">&quot;QHeaderView::section&#123;Background-color:#454545;border-radius: 0px;&#125;&quot;</span>)</span><br><span class="line">self.tableView.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)</span><br><span class="line">self.tableView_2.horizontalHeader().setDefaultAlignment(Qt.AlignLeft)</span><br></pre></td></tr></table></figure>
<ul>
<li>Qtableview显示的数据也同样根据盈亏使用不同的颜色<br />
这个在Model类中的data()函数中实现</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">data</span>(<span class="params">self, index, role=Qt.DisplayRole</span>):</span></span><br><span class="line">    <span class="keyword">if</span> index.isValid():</span><br><span class="line">        value = self._data.iloc[index.row(), index.column()]            </span><br><span class="line">        <span class="keyword">if</span> role == Qt.ForegroundRole <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">float</span>) <span class="keyword">and</span> index.column() == <span class="number">3</span>:</span><br><span class="line">            next_value = self._data.iloc[index.row(), index.column() + <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span>  next_value &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> QtGui.QColor(<span class="string">&#x27;#01D68A&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> QtGui.QColor(<span class="string">&#x27;#FF0018&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> role == Qt.ForegroundRole <span class="keyword">and</span> <span class="built_in">isinstance</span>(value, <span class="built_in">float</span>) <span class="keyword">and</span> index.column() != <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">if</span>  value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> QtGui.QColor(<span class="string">&#x27;#01D68A&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> QtGui.QColor(<span class="string">&#x27;#FF0018&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> role == Qt.DisplayRole:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">str</span>(self._data.iloc[index.row(), index.column()])</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重写鼠标事件，实现窗口拖放</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initDrag</span>(<span class="params">self</span>):</span></span><br><span class="line"><span class="comment"># 设置鼠标跟踪判断扳机默认值</span></span><br><span class="line">    self._move_drag   = <span class="literal">False</span></span><br><span class="line">    self._corner_drag = <span class="literal">False</span></span><br><span class="line">    self._bottom_drag = <span class="literal">False</span></span><br><span class="line">    self._right_drag  = <span class="literal">False</span></span><br><span class="line">    self._padding     = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resizeEvent</span>(<span class="params">self, QResizeEvent</span>):</span>        </span><br><span class="line">    <span class="comment"># 重新调整边界范围以备实现鼠标拖放缩放窗口大小，采用三个列表生成式生成三个列表</span></span><br><span class="line">    self._right_rect = [QPoint(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(self.width() - self._padding, self.width() + <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.height() - self._padding)]</span><br><span class="line">    self._bottom_rect = [QPoint(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, self.width() - self._padding)</span><br><span class="line">     <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(self.height() - self._padding, self.height() + <span class="number">1</span>)]</span><br><span class="line">    self._corner_rect = [QPoint(x, y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(self.width() - self._padding, self.width() + <span class="number">1</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(self.height() - self._padding, self.height() + <span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mousePressEvent</span>(<span class="params">self, event</span>):</span></span><br><span class="line">    <span class="comment"># 重写鼠标点击的事件</span></span><br><span class="line">    <span class="keyword">if</span> (event.button() == Qt.LeftButton) <span class="keyword">and</span> (event.pos() <span class="keyword">in</span> self._corner_rect):</span><br><span class="line">        <span class="comment"># 鼠标左键点击右下角边界区域</span></span><br><span class="line">        self._corner_drag = <span class="literal">True</span></span><br><span class="line">        event.accept()</span><br><span class="line">    <span class="keyword">elif</span> (event.button() == Qt.LeftButton) <span class="keyword">and</span> (event.pos() <span class="keyword">in</span> self._right_rect):</span><br><span class="line">        <span class="comment"># 鼠标左键点击右侧边界区域</span></span><br><span class="line">        self._right_drag = <span class="literal">True</span></span><br><span class="line">        event.accept()</span><br><span class="line">        self.setCursor(QCursor(Qt.SizeHorCursor))</span><br><span class="line">    <span class="keyword">elif</span> (event.button() == Qt.LeftButton) <span class="keyword">and</span> (event.pos() <span class="keyword">in</span> self._bottom_rect):</span><br><span class="line">        <span class="comment"># 鼠标左键点击下侧边界区域</span></span><br><span class="line">        self._bottom_drag = <span class="literal">True</span></span><br><span class="line">        event.accept()</span><br><span class="line">        self.setCursor(QCursor(Qt.SizeVerCursor))</span><br><span class="line">    <span class="keyword">elif</span> (event.button() == Qt.LeftButton) <span class="keyword">and</span> (event.y() &lt; self.label_10.y()+self.label_10.height() <span class="keyword">or</span> (event.y() &gt; self.label_9.y() <span class="keyword">and</span> event.y() &lt; self.tableView_2.y())):</span><br><span class="line">        <span class="comment"># 鼠标左键点击标题栏区域</span></span><br><span class="line">        self._move_drag = <span class="literal">True</span></span><br><span class="line">        self.move_DragPosition = event.globalPos() - self.pos()</span><br><span class="line">        event.accept()</span><br><span class="line">        self.setCursor(QCursor(Qt.OpenHandCursor))  <span class="comment">#更改鼠标图标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseMoveEvent</span>(<span class="params">self, QMouseEvent</span>):</span></span><br><span class="line">    <span class="comment"># 判断鼠标位置切换鼠标手势</span></span><br><span class="line">    <span class="comment"># if QMouseEvent.pos() in self._corner_rect:</span></span><br><span class="line">    <span class="comment">#     self.setCursor(Qt.SizeFDiagCursor)</span></span><br><span class="line">    <span class="comment">#     print(&quot;corner:%s, in %s&quot; %(QMouseEvent.pos(),self._corner_rect))</span></span><br><span class="line">    <span class="comment">#print(QMouseEvent.globalPos(), QMouseEvent.pos(), self.graphWidget.x(), self.graphWidget.y(), self.graphWidget.pos(), self.graphWidget.width(), self.graphWidget.height())</span></span><br><span class="line">    <span class="keyword">if</span> QMouseEvent.pos() <span class="keyword">in</span> self._bottom_rect:</span><br><span class="line">        self.setCursor(QCursor(Qt.SizeVerCursor))</span><br><span class="line">    <span class="keyword">elif</span> QMouseEvent.pos() <span class="keyword">in</span> self._right_rect:</span><br><span class="line">        self.setCursor(QCursor(Qt.SizeHorCursor))</span><br><span class="line">    <span class="keyword">elif</span> QMouseEvent.pos() <span class="keyword">in</span> self._corner_rect:</span><br><span class="line">        self.setCursor(QCursor(Qt.SizeFDiagCursor))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.setCursor(QCursor(Qt.ArrowCursor))</span><br><span class="line">    <span class="comment"># 当鼠标左键点击不放及满足点击区域的要求后，分别实现不同的窗口调整</span></span><br><span class="line">    <span class="comment"># 没有定义左方和上方相关的5个方向，主要是因为实现起来不难，但是效果很差，拖放的时候窗口闪烁，再研究研究是否有更好的实现</span></span><br><span class="line">    <span class="keyword">if</span> Qt.LeftButton <span class="keyword">and</span> self._right_drag:</span><br><span class="line">        <span class="comment"># 右侧调整窗口宽度</span></span><br><span class="line">        self.resize(QMouseEvent.pos().x(), self.height())</span><br><span class="line">        QMouseEvent.accept()</span><br><span class="line">    <span class="keyword">elif</span> Qt.LeftButton <span class="keyword">and</span> self._bottom_drag:</span><br><span class="line">        <span class="comment"># 下侧调整窗口高度</span></span><br><span class="line">        self.resize(self.width(), QMouseEvent.pos().y())</span><br><span class="line">        QMouseEvent.accept()</span><br><span class="line">    <span class="keyword">elif</span> Qt.LeftButton <span class="keyword">and</span> self._corner_drag:</span><br><span class="line">        <span class="comment"># 右下角同时调整高度和宽度</span></span><br><span class="line">        self.resize(QMouseEvent.pos().x(), QMouseEvent.pos().y())</span><br><span class="line">        QMouseEvent.accept()</span><br><span class="line">    <span class="keyword">elif</span> Qt.LeftButton <span class="keyword">and</span> self._move_drag:</span><br><span class="line">        <span class="comment"># 标题栏拖放窗口位置</span></span><br><span class="line">        self.move(QMouseEvent.globalPos() - self.move_DragPosition)</span><br><span class="line">        QMouseEvent.accept()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mouseReleaseEvent</span>(<span class="params">self, QMouseEvent</span>):</span></span><br><span class="line">    <span class="comment"># 鼠标释放后，各扳机复位</span></span><br><span class="line">    self._move_drag = <span class="literal">False</span></span><br><span class="line">    self._corner_drag = <span class="literal">False</span></span><br><span class="line">    self._bottom_drag = <span class="literal">False</span></span><br><span class="line">    self._right_drag = <span class="literal">False</span></span><br><span class="line">    self.setCursor(QCursor(Qt.ArrowCursor))</span><br></pre></td></tr></table></figure>
<h1 id="效果">效果</h1>
<p>完成后的应用界面效果如下： <img src="https://s2.loli.net/2022/04/14/ykQ7onW4ducAseD.png" /> # 参考 1. <a href="https://blog.csdn.net/weixin_40014984/article/details/104531359">VSCode配置Python、PyQt5、QtDesigner环境并创建一个ui界面测试</a> 2. <a href="https://zhuanlan.zhihu.com/p/66758263">python界面编程：VScode+pyqt+pyqt integration配置备忘</a> 3. <a href="https://blog.csdn.net/AzureMouse/article/details/90338961">PyQt5（designer）入门教程</a> 4. <a href="%5BEmbedding%20PyQtGraph%20(or%20any%20other%20custom%20PyQt5%20widgets)%20from%20Qt%20Designer%20(mfitzp.com)%5D(https://www.mfitzp.com/tutorials/embed-pyqtgraph-custom-widgets-qt-app/)">Embedding custom widgets from Qt Designer</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python】使用PYQT5来构建持仓盈亏监控(续)</title>
    <url>/2021/07/02/%E3%80%90Python%E3%80%91%E4%BD%BF%E7%94%A8PYQT5%E6%9D%A5%E6%9E%84%E5%BB%BA%E6%8C%81%E4%BB%93%E7%9B%88%E4%BA%8F%E7%9B%91%E6%8E%A7%20(%E7%BB%AD)/</url>
    <content><![CDATA[<h1 id="目的">目的</h1>
<p>实时通过图形的方式呈现盈亏情况</p>
<a id="more"></a>
<h1 id="安装pyqtgraph">安装PyQtgraph</h1>
<h2 id="安装">安装</h2>
<p>通过pip进行安装</p>
<blockquote>
<p>pip install pyqtgraph</p>
</blockquote>
<h2 id="界面设计">界面设计</h2>
<h3 id="使用qtdesigner来设计界面">使用QtDesigner来设计界面</h3>
<ol type="1">
<li>初始界面 初始界面设计如下： <img src="https://s2.loli.net/2022/04/14/zcTQvBmEta5WwuP.png" /></li>
</ol>
<p>在此基础上，增加一个<code>label</code>及<code>widget</code>。</p>
<p><img src="https://s2.loli.net/2022/04/14/sNtdLJD436alhbv.png" /> 将widget重命名为<code>“graphWidget"</code>。</p>
<p><img src="https://s2.loli.net/2022/04/14/JtQwUzni7kbOdMP.png" /> 点击右键，选择<code>“提升为...”</code>， 提升的类名称为<code>“PlotWidget”</code>, 头文件为<code>“pyqtgraph”</code>。</p>
<p><img src="https://s2.loli.net/2022/04/14/zwo5gmBSaQJ3Axy.png" /></p>
<p>之所以使用这种方法，是因为按一般做法，利用Qt Designer新建一个布局，在代码中动态添加一个PlotWidget到这个布局来实现，代码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyqtgraph <span class="keyword">as</span> pg</span><br><span class="line">plot_plt = pg.PlotWidget(background=(<span class="number">69</span>,<span class="number">69</span>,<span class="number">69</span>), axisItems=&#123;<span class="string">&#x27;bottom&#x27;</span>: TimeAxisItem(orientation=<span class="string">&#x27;bottom&#x27;</span>)&#125;)</span><br><span class="line">verticalLayout.addWidget(plot_plt) </span><br></pre></td></tr></table></figure>
<p>这里指定了背景色及坐标轴使用的模板。</p>
<p>这样的做法，我一直没有找到控制PlotWidget大小的方法，导致出来的图形结果与我的期望不太一致。因此才尝试在UI设计时就固定住该部件的大小。</p>
<h3 id="获取数据并展示">获取数据并展示</h3>
<ol type="1">
<li><p>将实时取得的持仓盈亏数据存入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.data_list = []</span><br><span class="line">self.data_list.append(<span class="built_in">float</span>(self.data_summary[<span class="string">&#x27;day_float_amount&#x27;</span>]))</span><br></pre></td></tr></table></figure></li>
<li><p>将时间进行时间戳转化存入列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timestamp</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(time.mktime(datetime.datetime.now().timetuple()))</span><br><span class="line"></span><br><span class="line">self.time_list = []</span><br><span class="line">self.time_list.append(timestamp())</span><br></pre></td></tr></table></figure></li>
<li><p>坐标轴显示为时间</p>
<p>默认pyqtgraph会使用0开始的整数来作为坐标轴的值。 这里希望使用实时取到的时间来做为显示的值，因此需要重写pyqtgraph的AxisItem类。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TimeAxisItem</span>(<span class="params">pg.AxisItem</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        <span class="comment">#self.setLabel(text=&#x27;Time&#x27;, units=None)</span></span><br><span class="line">        self.enableAutoSIPrefix(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tickStrings</span>(<span class="params">self, values, scale, spacing</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [datetime.datetime.fromtimestamp(value).strftime(<span class="string">&quot;%H:%M:%S&quot;</span>) <span class="keyword">for</span> value <span class="keyword">in</span> values]</span><br></pre></td></tr></table></figure></li>
<li><p>展示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">graphWidget.plot().setData(self.model.time_list, self.model.data_list,pen=<span class="string">&#x27;g&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="效果">效果</h1>
<p>完成后的应用界面效果如下： <img src="https://s2.loli.net/2022/04/14/pqdJtr7F5bMEcRV.png" /> # 参考 4. <a href="%5BPyQt5的PyQtGraph实践系列3：实时数据更新绘制图形%20-%20州的先生%20(zmister.com)%5D(https://zmister.com/archives/826.html)">PyQt5的PyQtGraph实践系列3：实时数据更新绘制图形</a> 2. <a href="%5BEmbedding%20PyQtGraph%20(or%20any%20other%20custom%20PyQt5%20widgets)%20from%20Qt%20Designer%20(mfitzp.com)%5D(https://www.mfitzp.com/tutorials/embed-pyqtgraph-custom-widgets-qt-app/)">Embedding custom widgets from Qt Designer</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pyqt5</tag>
      </tags>
  </entry>
  <entry>
    <title>【Rust】Rust在win10下开发环境的搭建</title>
    <url>/2021/01/04/%E3%80%90Rust%E3%80%91Rust%E5%9C%A8win10%E4%B8%8B%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>记录下如何在Windows 10环境下部署VScode的Rust开发环境。</p>
<h1 id="配置步骤">配置步骤</h1>
<h2 id="环境变量设置">环境变量设置</h2>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RUST&#x3D;d:\Program Files\RUST\.rustup\toolchains\stable-x86_64-pc-windows-msvc  </span><br><span class="line">CARGO HOME &#x3D; D:\Program Files\RUST\.cargo  </span><br><span class="line">RUSTUP_DIST_SERVER &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static  </span><br><span class="line">RUSTUP_HOME &#x3D; D:\Program Files\RUST\.rustup  </span><br><span class="line">RUSTUP_UPDATE_ROOT &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#x2F;rustup  </span><br><span class="line">RUST_SRC_PATH &#x3D; d:\Program Files\RUST\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib\rustlib\src\rust\src</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="配置windows的rust和crates.io国内镜像">配置Windows的Rust和Crates.io国内镜像</h2>
<h3 id="修改crates.io国内镜像">修改Crates.io国内镜像</h3>
<p>修改<code>~/.cargo/config</code> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[source.crates-io]  </span><br><span class="line">registry &#x3D; &quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crates.io-index&quot;  </span><br><span class="line"></span><br><span class="line">#Replace with any mirror source  </span><br><span class="line">replace-with &#x3D; &#39;ustc&#39;  </span><br><span class="line">#replace-with &#x3D; &#39;tuna&#39;  </span><br><span class="line">#replace-with &#x3D; &#39;sjtu&#39;  </span><br><span class="line">#replace-with &#x3D; &#39;rustcc&#39;  </span><br><span class="line"></span><br><span class="line">#University of science and technology of China  </span><br><span class="line">[source.ustc]  </span><br><span class="line">registry &#x3D; &quot;git:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;crates.io-index&quot;  </span><br><span class="line"></span><br><span class="line">#Tsinghua University  </span><br><span class="line">[source.tuna]  </span><br><span class="line">registry &#x3D; &quot;https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;git&#x2F;crates.io-index.git&quot;  </span><br><span class="line"></span><br><span class="line">#Shanghai Jiaotong University  </span><br><span class="line">[source.sjtu]  </span><br><span class="line">registry &#x3D; &quot;https:&#x2F;&#x2F;mirrors.sjtug.sjtu.edu.cn&#x2F;git&#x2F;crates.io-index&quot;  </span><br><span class="line"></span><br><span class="line">#Rustcc community  </span><br><span class="line">[source.rustcc]  </span><br><span class="line">registry &#x3D; &quot;git:&#x2F;&#x2F;crates.rustcc.cn&#x2F;crates.io-index&quot;  </span><br></pre></td></tr></table></figure> ### 修改rustup国内镜像</p>
<p>在系统环境变量中设置 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CARGO HOME &#x3D; D:\Program Files\RUST\.cargo  </span><br><span class="line">RUSTUP_DIST_SERVER &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static  </span><br><span class="line">RUSTUP_HOME &#x3D; D:\Program Files\RUST\.rustup  </span><br><span class="line">RUSTUP_UPDATE_ROOT &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;rust-static&#x2F;rustup  </span><br></pre></td></tr></table></figure></p>
<h2 id="vs-code插件安装">VS Code插件安装</h2>
<ol type="1">
<li><p>rust-analyzer</p>
<p>该插件有说明与会与官方的Rust有冲突，二者只能先激活一个。</p>
<p><img src="https://s2.loli.net/2022/04/14/vGay32FOwzkAWtL.png" /></p></li>
<li><p>CodeLLDB</p>
<p>基于LLDB的原生debugger.详见<a href="https://github.com/vadimcn/vscode-lldb">官网</a></p></li>
<li><p>TabNine</p>
<p>基于深度学习的智能提示插件, 详见<a href="https://www.tabnine.com/">官网</a></p></li>
</ol>
<h2 id="开启vs-code进行测试">开启VS Code进行测试</h2>
<p>安装插件，重启VS Code后。</p>
<p>现在运行官网示例。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> ferris_says::say; <span class="comment">// from the previous step</span></span><br><span class="line"><span class="keyword">use</span> std::io::&#123;stdout, BufWriter&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> stdout = stdout();</span><br><span class="line">    <span class="keyword">let</span> message = <span class="built_in">String</span>::from(<span class="string">&quot;Hello fellow Rustaceans!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> width = message.chars().count();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> writer = BufWriter::new(stdout.lock());</span><br><span class="line">    say(message.as_bytes(), width, &amp;<span class="keyword">mut</span> writer).unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/6qljpGuyzBgOmE4.png" /></p>
<p>测试， RA、CodeLLDB及TabNine工作正常。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>【Rust】Rust的安装及卸载升级</title>
    <url>/2021/01/04/%E3%80%90Rust%E3%80%91Rust%E7%9A%84%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8F%8A%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="安装">安装</h1>
<h2 id="下载rust的安装器">下载Rust的安装器</h2>
<p>从<a href="https://www.rust-lang.org/zh-CN/tools/install">官网</a>下载<code>rustup-init.exe</code>。</p>
<p><img src="https://s2.loli.net/2022/04/14/niWOEIa1qNCkS4D.png" /></p>
<p>说明：</p>
<blockquote>
<p><code>rustup</code>是安装和管理 <strong>Rust 构建版本</strong>的工具。rustup 用于管理不同平台下的 Rust 构建版本并使其互相兼容， 支持安装由 Beta 和 Nightly 频道发布的版本，并支持其他用于交叉编译的编译版本 <code>cargo</code>是rust的<strong>包管理器和构建系统工具</strong>。它将常用命令集于一身，无需引入其它命令。</p>
<p>rustup程序是rust的安装程序，也是他的版本管理程序，类似于Python的Anaconda发行版的conda工具，非常方便使用管理。cargo是rust的构建工具，暂不介绍，需要明白的是：rustup是管理语言自身的，cargo是管理第三方拓展的。</p>
</blockquote>
<a id="more"></a>
<h2 id="配置path环境变量">配置<code>path</code>环境变量</h2>
<p>在 Rust 开发环境中，所有工具都安装在 <code>~/.cargo/bin</code> 目录中，您可以在这里找到包括 <code>rustc</code>、<code>cargo</code> 和 <code>rustup</code> 在内的 Rust 工具链。</p>
<p>所以，如果打算修改默认的安装位置，可以在环境变量中这样设置，以安装路径为<code>D:\Program Files\Rust\</code>为例。否则会默认安装在 C 盘下。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CARGO_HOME：D:\Program Files\RUST\.cargo</span><br><span class="line">RUSTUP_HOME：D:\Program Files\RUST\.rustup</span><br></pre></td></tr></table></figure></p>
<h2 id="安装-1">安装</h2>
<h3 id="msvc工具链方式">MSVC工具链方式</h3>
<p>下载完成后直接点击执行，会出现一个CMD窗口：仔细阅读上面的内容，如果没有安装Microsoft 2019 builder tools，就从<a href="https://visualstudio.microsoft.com/downloads/">这里</a>进行下载安装。</p>
<p><img src="https://s2.loli.net/2022/04/14/bImn2Ea5iWvBjyq.png" /></p>
<p>下载build tools之后，在Visual studio installer中只选择“C++生成工具”，然后只选择"MSVC v142 - VS2019 C++ x64/x86 生成工具"。安装上去大约需要1.8G硬盘空间。</p>
<p><img src="https://s2.loli.net/2022/04/14/vtG5I9asQCFJRel.png" /></p>
<h3 id="安装rust">安装Rust</h3>
<p>运行<code>rustup-init.exe</code></p>
<p>然后，在下面输入1，进行默认安装：</p>
<p><img src="https://s2.loli.net/2022/04/14/Cj57oheYcTtazVw.png" /> 检查是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rustc --version</span><br><span class="line">cargo --version　　</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/04/14/8TDtqLRv5nohfUC.png" /></p>
<h3 id="gnu工具链方式">GNU工具链方式</h3>
<p>gnu（本文使用MinGW-w64）占用空间小（500M），对于初步的rust使用足够了。</p>
<p><a href="http://www.mingw-w64.org/doku.php">MinGW-w64下载</a></p>
<h4 id="安装mingw-w64">安装MinGW-w64</h4>
<p><img src="https://s2.loli.net/2022/04/14/stGr4SkjB6O5UyA.png" /> 这里你可以选择安装的版本, 建议只更改第二项至x86_64, 其他选项不做改动。</p>
<p><img src="https://s2.loli.net/2022/04/14/vXhQYsD5CEOa6ZU.png" /> <strong>关于Threads选项的说明：</strong></p>
<p>To summarize:</p>
<ul>
<li><code>posix</code>: enable C++11/C11 multithreading features. Makes libgcc depend on libwinpthreads, so that even if you don't directly call pthreads API, you'll be distributing the winpthreads DLL. There's nothing wrong with distributing one more DLL with your application.</li>
<li><code>win32</code>: No C++11 multithreading features.</li>
</ul>
<p>Neither have influence on any user code calling Win32 APIs or pthreads APIs. You can always use both.</p>
<p>exception seh (for Structured Exception Handling mechanism).</p>
<p>这里可以设置安装目录, 我安装在</p>
<p><img src="https://s2.loli.net/2022/04/14/36j1DTMVsA8moLq.png" /> ### 环境变量的配置</p>
<p>新增 <code>D:\Program Files\mingw-w64\x86_64-8.1.0-posix-seh-rt_v6-rev0\mingw64\bin</code>到<code>PATH</code>。</p>
<h3 id="检查安装是否成功">检查安装是否成功</h3>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Users\junlv&gt;mingw32<span class="literal">-make</span> -<span class="literal">-version</span></span><br><span class="line">GNU Make <span class="number">4.2</span>.<span class="number">1</span></span><br><span class="line">Built <span class="keyword">for</span> x86_64<span class="literal">-w64</span><span class="literal">-mingw32</span></span><br><span class="line">Copyright (C) <span class="number">1988</span><span class="literal">-2016</span> Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version <span class="number">3</span> or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">C:\Users\junlv&gt;g++ -<span class="literal">-version</span></span><br><span class="line">g++ (x86_64<span class="literal">-posix</span><span class="literal">-seh</span><span class="literal">-rev0</span>, Built by MinGW<span class="literal">-W64</span> project) <span class="number">8.1</span>.<span class="number">0</span></span><br><span class="line">Copyright (C) <span class="number">2018</span> Free Software Foundation, Inc.</span><br><span class="line">This is free software; see the source <span class="keyword">for</span> copying conditions.  There is NO</span><br><span class="line">warranty; not even <span class="keyword">for</span> MERCHANTABILITY or FITNESS <span class="keyword">FOR</span> A PARTICULAR PURPOSE.</span><br></pre></td></tr></table></figure>
<h3 id="安装rust-1">安装Rust</h3>
<p>运行<code>rustup-init.exe</code></p>
<p>然后，在下面输入2，进行定制化安装：</p>
<p><code>default host triple</code>修改为<code>x86_64-pc-windows-gnu</code></p>
<p><img src="https://s2.loli.net/2022/04/14/kGcCHQeSyV4FI58.png" /></p>
<p>继续选1进行安装即可。</p>
<p>安装验证</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">E:\Downloads\Programs&gt;rustc -<span class="literal">-version</span></span><br><span class="line">rustc <span class="number">1.49</span>.<span class="number">0</span> (e1884a8e3 <span class="number">2020</span><span class="literal">-12</span><span class="literal">-29</span>)</span><br><span class="line"></span><br><span class="line">E:\Downloads\Programs&gt;cargo -<span class="literal">-version</span></span><br><span class="line">cargo <span class="number">1.49</span>.<span class="number">0</span> (d00d64df9 <span class="number">2020</span><span class="literal">-12</span><span class="literal">-05</span>)</span><br></pre></td></tr></table></figure>
<p>安装源代码用于代码补全</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">E:\Downloads\Programs&gt;rustup component add rust<span class="literal">-src</span></span><br><span class="line">info: downloading component <span class="string">&#x27;rust-src&#x27;</span></span><br><span class="line">info: installing component <span class="string">&#x27;rust-src&#x27;</span></span><br><span class="line">info: <span class="keyword">using</span> up to 500.0 MiB of RAM to unpack components</span><br></pre></td></tr></table></figure>
<h1 id="卸载">卸载</h1>
<p>如果想卸载 Rust，可以运行 <code>rustup self uninstall</code></p>
<p><img src="https://s2.loli.net/2022/04/14/EyY1jSnGU8LptcT.png" /> # 升级 如果曾经安装过 <code>rustup</code>，可以执行 <code>rustup update</code> 来升级 Rust。 在升级过程中，如果遇到无法下载<code>rustup-init.exe</code>文件之类的错误，尝试更改国内镜像。使用中科大和清华源时出现过该类问题。更改为字节跳动镜像。 <code>RUSTUP_DIST_SERVER="https://rsproxy.cn" export RUSTUP_UPDATE_ROOT="https://rsproxy.cn/rustup"</code></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>【Rust】Rust配置日志记录</title>
    <url>/2022/04/13/%E3%80%90Rust%E3%80%91Rust%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>利用 <code>log</code> 及 <code>env_logger</code>来配置日志。</p>
<h1 id="简介">简介</h1>
<h2 id="crate-log"><em>Crate</em> log</h2>
<h3 id="功能说明">功能说明</h3>
<p><code>log</code> 提供了一个单独的日志记录 <em>API</em>，给出了日志库的一般抽象，后面具体的日志库需要基于这个抽象实现具体的实例。</p>
<p>日志请求由目标，级别和内容组成。目标是一个字符串，其默认为日志请求的位置的模块路径，尽管可能会覆盖默认值。记录器实现通常使用目标基于某些用户配置来过滤日志请求。</p>
<h3 id="记录器实现">记录器实现</h3>
<p>为了生成日志输出，必须使用与 <code>log</code> 兼容的日志记录器实现。有许多可用的实现可供选择，这里有一些常用的： - 精简版记录器: - <a href="https://docs.rs/env_logger/*/env_logger/">env_logger</a> - <a href="https://github.com/borntyping/rust-simple_logger">simple_logger</a> - <a href="https://github.com/drakulix/simplelog.rs">simplelog</a> - <a href="https://docs.rs/pretty_env_logger/*/pretty_env_logger/">pretty_env_logger</a> - <a href="https://docs.rs/stderrlog/*/stderrlog/">stderrlog</a> - <a href="https://docs.rs/flexi_logger/*/flexi_logger/">flexi_logger</a> - 复杂且可配置的框架: - <a href="https://docs.rs/log4rs/*/log4rs/">log4rs</a> - <a href="https://docs.rs/fern/*/fern/">fern</a> - 专用适配: - <a href="https://docs.rs/syslog/*/syslog/">syslog</a> - <a href="https://docs.rs/slog-stdlog/*/slog_stdlog/">slog-stdlog</a> - <a href="https://docs.rs/log/latest/log/(https://docs.rs/systemd-journal-logger/*/systemd_journal_logger/)">systemd-journal-logger</a> - <a href="https://docs.rs/log/latest/log/(https://docs.rs/android_log/*/android_log/)">android_log</a> - <a href="https://docs.rs/log/latest/log/(https://docs.rs/win_dbg_logger/*/win_dbg_logger/)">win_dbg_logger</a> - WebAssembly可用: - <a href="https://docs.rs/log/latest/log/(https://docs.rs/console_log/*/console_log/)">console_log</a> - 动态库: - 构建在<code>log</code>之上的 FFI-safe wrapper 来初始化库。</p>
<a id="more"></a>
<h3 id="日志分级">日志分级</h3>
<p><code>log</code>的最基本的用法是通过5个宏来实现的。 <strong>定义</strong>如下： <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[repr(usize)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Level</span></span> &#123;</span><br><span class="line">    Error,</span><br><span class="line">    Warn,</span><br><span class="line">    Info,</span><br><span class="line">    <span class="built_in">Debug</span>,</span><br><span class="line">    Trace,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong>优先级</strong>：<code>error!</code> &gt; <code>warn!</code> &gt; <code>info!</code> &gt; <code>debug!</code> &gt; <code>trace!</code>。<code>error!</code>的优先级最高，<code>trace!</code>优先级最低。</p>
<h2 id="crate-env_logger"><em>Crate</em> env_logger</h2>
<p><code>env_logger</code> 通过配置环境变量来实现日志记录器的功能。</p>
<h3 id="应用示例">应用示例</h3>
<ol type="1">
<li>打印不同级别日志 <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> logtests &#123;</span><br><span class="line">    <span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_log_default</span></span>()&#123;</span><br><span class="line">		<span class="keyword">use</span> log::&#123;debug, error, warn, info&#125;;</span><br><span class="line"></span><br><span class="line">		env_logger::init();</span><br><span class="line"></span><br><span class="line">		debug!(<span class="string">&quot;debug message&quot;</span>);</span><br><span class="line">		info!(<span class="string">&quot;informational message&quot;</span>);</span><br><span class="line">		warn!(<span class="string">&quot;warning message&quot;</span>);</span><br><span class="line">		error!(<span class="string">&quot;error message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 运行<code>cargo test -- test_log_default</code>进行测试，结果如下： <img src="https://s2.loli.net/2022/04/13/5BoA2P6TvVd3GCD.png" /> 为什么无法看到 <em>error</em> 以下级别的日志呢？ 从 <code>env_logger</code> 的源代码中有以下说明： &gt;Log levels are controlled on a per-module basis, and <strong>by default all logging is disabled except for the <code>error</code> level</strong>.<a href="#fn1" class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></li>
</ol>
<p>基于<code>env_logger</code>的工作模式，需要对 环境变量 <em>RUST_LOG</em> 进行预定义，对以上代码使用以下方式测试。 先设置环境变量 <em>RUST_LOG</em> ，然后运行测试， <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">set</span> RUST_LOG=trace</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cargo <span class="built_in">test</span> -- test_log_default</span></span><br></pre></td></tr></table></figure> 结果如下： <img src="https://s2.loli.net/2022/04/13/MZbY89mlxsUIXBo.png" /></p>
<ol start="2" type="1">
<li><p>采用本地时间作为时间戳 这时需要创建日志生成器 <em>builder</em> 中的 <em>format</em> 方法来完成输出格式的配置。 <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure> 运行<code>set RUST_LOG=trace &amp;&amp; cargo test -- test_log_localtime</code><a href="#fn2" class="footnote-ref" id="fnref2" role="doc-noteref"><sup>2</sup></a> 结果如下： <img src="https://s2.loli.net/2022/04/13/qr49HXw6BNJmakA.png" /> 可以看出， 时间戳已经更改为本地时间，但是整个日志格式比较简陋。</p></li>
<li><p>输出格式美化 依照默认输出时的格式，在时间戳、级别、目标前后加入方括号。方括号表现为较高亮度，级别用不同颜色区别。</p></li>
</ol>
<ul>
<li>对级别及方括号分别创建样式 <em>Style</em> ，</li>
<li><em>Style</em> 中的 <em>set_intense</em> 方法用来设置高亮度</li>
<li><em>Style</em> 中的 <em>set_color</em> 方法用来设置颜色，参数为 <em>enum</em> 类型 <figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[non_exhaustive]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span></span> &#123;</span><br><span class="line">    Black,</span><br><span class="line">    Blue,</span><br><span class="line">    Green,</span><br><span class="line">    Red,</span><br><span class="line">    Cyan,</span><br><span class="line">    Magenta,</span><br><span class="line">    Yellow,</span><br><span class="line">    White,</span><br><span class="line">    Ansi256(<span class="built_in">u8</span>),</span><br><span class="line">    Rgb(<span class="built_in">u8</span>, <span class="built_in">u8</span>, <span class="built_in">u8</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><em>Style</em> 中的 <em>set_bold</em> 方法用来设置字体粗细</li>
<li><em>Style</em> 中的 <em>value</em> 方法用来封装需要格式化的内容</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[test]</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">test_log_beautify</span></span>()&#123;</span><br><span class="line">        <span class="keyword">use</span> log::&#123;debug, error, warn, info, trace&#125;;</span><br><span class="line">        <span class="keyword">use</span> env_logger::Builder;</span><br><span class="line">        <span class="keyword">use</span> env_logger::fmt::Color;</span><br><span class="line">        <span class="keyword">use</span> chrono::Local;</span><br><span class="line">        <span class="keyword">use</span> std::io::Write;</span><br><span class="line">        <span class="keyword">use</span> log::Level;      </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建env_logger生成器， 也可直接写成env_logger::builder()</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> builder = Builder::from_default_env();</span><br><span class="line">        </span><br><span class="line">        builder</span><br><span class="line">        .format(|buf, record| &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> level_style = buf.style();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut</span> brace_style = buf.style();</span><br><span class="line">            level_style.set_intense(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">match</span> record.level() &#123;</span><br><span class="line">                Level::Trace =&gt; level_style.set_color(Color::Cyan).set_bold(<span class="literal">true</span>),</span><br><span class="line">                Level::<span class="built_in">Debug</span> =&gt; level_style.set_color(Color::Blue).set_bold(<span class="literal">true</span>),</span><br><span class="line">                Level::Info =&gt; level_style.set_color(Color::Green).set_bold(<span class="literal">true</span>),</span><br><span class="line">                Level::Warn =&gt; level_style.set_color(Color::Yellow).set_bold(<span class="literal">true</span>),</span><br><span class="line">                Level::Error =&gt; level_style.set_color(Color::Red).set_bold(<span class="literal">true</span>),</span><br><span class="line">            &#125;;</span><br><span class="line">            brace_style.set_color(Color::Black).set_intense(<span class="literal">true</span>);</span><br><span class="line">            <span class="built_in">writeln!</span>(buf, <span class="string">&quot;&#123;&#125;&#123;&#125; &#123;&#125; &#123;&#125;&#123;&#125; &#123;&#125;&quot;</span>, </span><br><span class="line">                    brace_style.value(<span class="string">&quot;[&quot;</span>),</span><br><span class="line">                    Local::now().format(<span class="string">&quot;%Y-%m-%d %H:%M:%S%.3f&quot;</span>), </span><br><span class="line">                    level_style.value(record.level()), </span><br><span class="line">                    record.target(), </span><br><span class="line">                    brace_style.value(<span class="string">&quot;]&quot;</span>), </span><br><span class="line">                    record.args())</span><br><span class="line">           &#125;)</span><br><span class="line">        .init();</span><br><span class="line"></span><br><span class="line">        trace!(<span class="string">&quot;trace message&quot;</span>);</span><br><span class="line">        debug!(<span class="string">&quot;debug message&quot;</span>);</span><br><span class="line">        info!(<span class="string">&quot;informational message&quot;</span>);</span><br><span class="line">        warn!(<span class="string">&quot;warning message&quot;</span>);</span><br><span class="line">        error!(<span class="string">&quot;error message&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行<code>set RUST_LOG=trace &amp;&amp; cargo test -- test_log_beautify</code> 结果如下： <img src="https://s2.loli.net/2022/04/13/lvO2d5gfNskSyMJ.png" /></p>
<h1 id="参考">参考</h1>
<ol type="1">
<li><a href="https://docs.rs/crate/log/latest">log 文档</a></li>
<li><a href="https://docs.rs/crate/env_logger/0.9.0">env_logger 文档</a></li>
</ol>
<h1 id="注释">注释</h1>
<section class="footnotes" role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a href="https://docs.rs/env_logger/latest/src/env_logger/lib.rs.html#11-1315">lib.rs - source (docs.rs)</a>, 第92行。<a href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>该命令可以在 <em>cmd</em> 下同时执行多条命令, 命令格式：<strong>command1 &amp;&amp; command2</strong> ，command1执行成后后才能执行command2。<a href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
]]></content>
      <categories>
        <category>程序语言</category>
      </categories>
      <tags>
        <tag>计算机技术/程序语言</tag>
        <tag>Rust</tag>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>【Rust】在jupyter notebook中使用Rust</title>
    <url>/2021/01/07/%E3%80%90Rust%E3%80%91%E5%9C%A8jupyter-notebook%E4%B8%AD%E4%BD%BF%E7%94%A8Rust/</url>
    <content><![CDATA[<p>在jupyter notebook中是否也可以像python那样使用呢？ 答案是可以的。现在来记录一下配置步骤。</p>
<h1 id="使用evcxr作为jupyter-notebook内核">使用EvCxR作为jupyter notebook内核</h1>
<h2 id="安装">安装</h2>
<ol type="1">
<li><p>安装jupyter notebook或者jupyter lab</p></li>
<li><p>安装<a href="https://cmake.org/download/">CMake</a>，在安装EvCxR编译时会使用到。</p></li>
<li><p>安装EvCxR</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cargo install evcxr_jupyter</span><br><span class="line">evcxr_jupyter -<span class="literal">-install</span></span><br></pre></td></tr></table></figure></li>
</ol>
<a id="more"></a>
<h2 id="问题">问题</h2>
<p>安装过程中，原来rust选择的是gnu的工具链编译，但在编译libzmq时会报错，</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\PROGRA~<span class="number">1</span>\MINGW-~<span class="number">1</span>\X86_64~<span class="number">1.0</span><span class="literal">-P</span>\mingw64\bin\G__~<span class="number">1</span>.EXE   <span class="literal">-std</span>=gnu++<span class="number">11</span> <span class="literal">-Wno</span><span class="literal">-tautological</span><span class="literal">-constant</span><span class="literal">-compare</span>  <span class="literal">-o</span> CMakeFiles\cmTC_57766.dir\CheckSymbolExists.cxx.obj <span class="literal">-c</span> E:\Tmp\libzmq<span class="literal">-4</span>.<span class="number">3.3</span>\build\CMakeFiles\CMakeTmp\CheckSymbolExists.cxx</span><br><span class="line"></span><br><span class="line">E:\Tmp\libzmq<span class="literal">-4</span>.<span class="number">3.3</span>\build\CMakeFiles\CMakeTmp\CheckSymbolExists.cxx: <span class="keyword">In</span> <span class="function"><span class="keyword">function</span> &#x27;<span class="title">int</span> <span class="title">main</span><span class="params">(int, char**)</span>&#x27;:</span></span><br><span class="line">E:\Tmp\libzmq<span class="literal">-4</span>.<span class="number">3.3</span>\build\CMakeFiles\CMakeTmp\CheckSymbolExists.cxx:<span class="number">8</span>:<span class="number">19</span>: error: <span class="string">&#x27;strlcpy&#x27;</span> was not declared <span class="keyword">in</span> this scope</span><br><span class="line">   <span class="keyword">return</span> ((int*)(&amp;strlcpy))[<span class="type">argc</span>];</span><br><span class="line">                   ^~~~~~~</span><br><span class="line">E:\Tmp\libzmq<span class="literal">-4</span>.<span class="number">3.3</span>\build\CMakeFiles\CMakeTmp\CheckSymbolExists.cxx:<span class="number">8</span>:<span class="number">19</span>: note: suggested alternative: <span class="string">&#x27;strncpy&#x27;</span></span><br><span class="line">   <span class="keyword">return</span> ((int*)(&amp;strlcpy))[<span class="type">argc</span>];</span><br><span class="line">                   ^~~~~~~</span><br><span class="line">                   strncpy</span><br><span class="line">At global scope:</span><br><span class="line">cc1plus.exe: warning: unrecognized command line option <span class="string">&#x27;-Wno-tautological-constant-compare&#x27;</span></span><br><span class="line">mingw32<span class="literal">-make</span>.exe[<span class="number">1</span>]: *** [<span class="type">CMakeFiles</span>\<span class="type">cmTC_57766.dir</span>\<span class="type">build.make</span>:<span class="number">84</span>: <span class="type">CMakeFiles</span>/<span class="type">cmTC_57766.dir</span>/<span class="type">CheckSymbolExists.cxx.obj</span>] Error <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mingw32<span class="literal">-make</span>.exe[<span class="number">1</span>]: Leaving directory <span class="string">&#x27;E:/Tmp/libzmq-4.3.3/build/CMakeFiles/CMakeTmp&#x27;</span></span><br><span class="line"></span><br><span class="line">mingw32<span class="literal">-make</span>.exe: *** [<span class="type">Makefile</span>:<span class="number">139</span>: <span class="type">cmTC_57766</span>/<span class="type">fast</span>] Error <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">File E:/Tmp/libzmq<span class="literal">-4</span>.<span class="number">3.3</span>/build/CMakeFiles/CMakeTmp/CheckSymbolExists.cxx:</span><br><span class="line">/* */</span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv)</span><br><span class="line">&#123;</span><br><span class="line">  (void)argv;</span><br><span class="line"><span class="comment">#ifndef strlcpy</span></span><br><span class="line">  <span class="keyword">return</span> ((int*)(&amp;strlcpy))[<span class="type">argc</span>];</span><br><span class="line"><span class="comment">#else</span></span><br><span class="line">  (void)argc;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>尝试手动编译libzmq, 但无论4.3.3或4.3.2版本都无法成功。 具体原因从issue里也没有太多参考意义。后来从<a href="https://github.com/google/evcxr/issues/53">EvCxR issue 53</a>中得到些启发，将rust的工具链换回msvc工具链。重新安装EvCxR，成功。</p>
<p><img src="https://s2.loli.net/2022/04/14/qIxXnlzYaC7kETM.png" /> 测试</p>
<p><img src="https://s2.loli.net/2022/04/14/IxYUjVNrOBfE1el.png" /> # 参考</p>
<ol type="1">
<li><a href="https://github.com/google/evcxr/blob/master/evcxr_jupyter/README.md">EvCxR Jupyter Kernel</a></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>rust</category>
      </categories>
      <tags>
        <tag>rust</tag>
        <tag>jupyternotebook</tag>
      </tags>
  </entry>
  <entry>
    <title>【cmder】在VsCode使用Cmder作为默认终端</title>
    <url>/2021/09/11/%E3%80%90cmder%E3%80%91%E5%9C%A8VsCode%E4%BD%BF%E7%94%A8Cmder%E4%BD%9C%E4%B8%BA%E9%BB%98%E8%AE%A4%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>实在忍受不了<code>VsCode</code>里的默认终端为<code>powershell</code>或<code>cmd</code>, 希望能使用<code>cmder</code>来作为默认终端。</p>
<h1 id="配置步骤">配置步骤</h1>
<p>旧版的<code>VsCode</code>使用以下方法修改。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;terminal.integrated.shellArgs.windows&quot;:[&quot;/k %CMDER_ROOT%\\vendor\\init.bat&quot;]</span><br></pre></td></tr></table></figure>
<p>当VSCode升级至1.57.1(2021.6.17)时，会出现警告提示：</p>
<p><img src="https://s2.loli.net/2022/04/14/hT1As3nwuqpFCyQ.png" /></p>
<p>意思是此项已弃用，<code>Microsoft</code>官方配置默认 shell 的新推荐方法是在 #terminal.integrated.profiles.windows# 中创建一个终端配置文件，并将其配置文件名称设置为 #terminal.integrated.defaultProfile.windows# 中的默认值。此操作当前将优先于新的配置文件设置，但将来会发生更改。</p>
<ol type="1">
<li>打开<code>User Settings</code>(<code>File</code>-&gt; <code>Preferences</code>-&gt; <code>Settings</code>)。</li>
<li>输入栏：<code>terminal.integrated.Profiles.windows</code>, 并点击<code>Edit in settings.son</code>。</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/14/ltZiaKGOpsSDTkE.png" /></p>
<ol start="3" type="1">
<li><p>添加新的配置， 并设置<code>cmder</code>为默认配置。</p></li>
<li><p>打开一个新终端(<code>Terminal</code> -&gt; <code>New Terminal</code>)</p>
<table>
<thead>
<tr class="header">
<th><img src="https://s2.loli.net/2022/04/14/WbDMzE32fayt8Hg.png" /></th>
<th><img src="https://s2.loli.net/2022/04/14/sGTVRWPSaAH2E9f.png" /></th>
</tr>
</thead>
<tbody>
</tbody>
</table></li>
</ol>
<h1 id="参考">参考</h1>
<p>1/ <a href="https://code.visualstudio.com/docs/editor/integrated-terminal#_terminal-profiles">Integrated Terminal in Visual Studio Code</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>VsCode</tag>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title>【cmder】cmder+fluent terminal的使用及配置</title>
    <url>/2021/03/18/%E3%80%90cmder%E3%80%91cmder+fluent%20terminal%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Windows的cmd实在过于丑陋，且使用起来有诸多的不方便， 平时也会使用git bash, 那么有没有办法将它们集成在一起，并且有个漂亮的外观呢？ 答案是肯定的。 那就是cmder + fluent terminal。</p>
<a id="more"></a>
<h2 id="特点">特点</h2>
<ul>
<li>便携，解压即可用</li>
<li>自带git、ls、curl等命令</li>
<li>可设置命令别名</li>
<li>丰富的颜色主题（Solarized、Twilight、Ubuntu、xterm、Monokai，甚至接受自定）、可定制字体</li>
<li>支持tab分页、同屏多端口（支持水平分割、垂直分割）</li>
<li>支持自定terminal，无论是CMD、PowerShell、bash都可以，还可以注入环境变量</li>
</ul>
<h2 id="安装">安装</h2>
<p>从<a href="https://cmder.net/">官网</a>下载，解压即可。这里我用的是mini版。</p>
<h2 id="配置">配置</h2>
<h3 id="外观配置">外观配置</h3>
<p>右键Tab栏空白处，弹出菜单选择<code>Settings</code>, 在这里可以进行cmder的配置</p>
<ul>
<li><p>字体</p>
<p>这里默认是<code>Consolas</code>, 可以根据自己喜好选择合适的字体，推荐使用<code>input Mono</code>、<code>Inconsolata</code>、<code>Consolas</code>、<code>Courier New</code>。</p></li>
<li><p>色彩方案</p>
<p><code>Features-&gt;Colors</code>来选择色彩方案，可以使用预先定义好的多种方案，也可以自定义。</p>
<p>可以参考<a href="https://github.com/joonro/ConEmu-Color-Themes">Github | joonro/ConEmu-Color-Themes</a></p></li>
<li><p>集成fluent terminal</p>
<p>比较喜欢fluent terminal的风格，把cmder从ConEmu里解放出来。</p>
<ul>
<li><p>从<a href="https://github.com/felixse/FluentTerminal#automatic-install">github</a>或<a href="https://www.microsoft.com/zh-cn/p/fluent-terminal/9p2krlmfxf9t?cid=storebadge&amp;ocid=badge&amp;rtc=1&amp;activetab=pivot:overviewtab">microsoft store</a>安装。</p></li>
<li><p>将以下配置保存为<code>Monokai.flutecolors</code>, 在设置主题时会使用到。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#123;</span><br><span class="line">    &quot;Name&quot;: &quot;Monokai&quot;,</span><br><span class="line">    &quot;Author&quot;: &quot;David Refoua &lt;David@Refoua.me&gt;&quot;,</span><br><span class="line">    &quot;Colors&quot;: &#123;</span><br><span class="line">      &quot;Foreground&quot;: &quot;#F8F8F0&quot;,</span><br><span class="line">      &quot;Background&quot;: &quot;#282828&quot;,</span><br><span class="line">      &quot;Cursor&quot;: &quot;#f8f8f0&quot;,</span><br><span class="line">      &quot;CursorAccent&quot;: &quot;#272822&quot;,</span><br><span class="line">      &quot;Selection&quot;: &quot;rgba(73, 72, 62, 0.3)&quot;,</span><br><span class="line">      &quot;Black&quot;: &quot;#2E3436&quot;,</span><br><span class="line">      &quot;Red&quot;: &quot;#CB064D&quot;,</span><br><span class="line">      &quot;Green&quot;: &quot;#8dd006&quot;,</span><br><span class="line">      &quot;Yellow&quot;: &quot;#e6db74&quot;,</span><br><span class="line">      &quot;Blue&quot;: &quot;#0376dd&quot;,</span><br><span class="line">      &quot;Magenta&quot;: &quot;#9d74e6&quot;,</span><br><span class="line">      &quot;Cyan&quot;: &quot;#52aebf&quot;,</span><br><span class="line">      &quot;White&quot;: &quot;#F8F8F2&quot;,</span><br><span class="line">      &quot;BrightBlack&quot;: &quot;#555753&quot;,</span><br><span class="line">      &quot;BrightRed&quot;: &quot;#F92672&quot;, &#x2F;&#x2F; #f3044b</span><br><span class="line">      &quot;BrightGreen&quot;: &quot;#A6E22E&quot;,</span><br><span class="line">      &quot;BrightYellow&quot;: &quot;#FED330&quot;,</span><br><span class="line">      &quot;BrightBlue&quot;: &quot;#0383f5&quot;,</span><br><span class="line">      &quot;BrightMagenta&quot;: &quot;#AE81FF&quot;,</span><br><span class="line">      &quot;BrightCyan&quot;: &quot;#66D9EF&quot;,</span><br><span class="line">      &quot;BrightWhite&quot;: &quot;#F8F8F0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开<code>Fluent Terminal</code>， 进入设置或热键<code>Ctrl-Shift ,</code>在主题中导入<code>Monokai.flutecolors</code>文件，保存并设置为默认主题。</p></li>
<li><p>参考<a href="https://github.com/cmderdev/cmder/wiki/Setting-up-Environment-Variables">cmder环境变量设置</a>对<code>%CMDER_ROOT%</code>、<code>%ConEmuDir%</code>加入环境变量中。</p></li>
</ul></li>
</ul>
<h2 id="终端类型配置">终端类型配置</h2>
<h3 id="cmder中的配置">cmder中的配置</h3>
<h4 id="git-bash">Git bash</h4>
<p>Task parameters</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;icon &quot;D:\Program Files\Git\etc\git.ico&quot;</span><br></pre></td></tr></table></figure>
<p>Commands</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;D:\Program Files\Git\bin\sh.exe&quot; -l -new_console:d:%USERPROFILE%</span><br></pre></td></tr></table></figure>
<h4 id="cmd">CMD</h4>
<p>Commands</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe &#x2F;k &quot;%ConEmuBaseDir%\CmdInit.cmd&quot;</span><br></pre></td></tr></table></figure>
<h4 id="cmdadmin">CMD(admin)</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe &#x2F;k &quot;%ConEmuBaseDir%\CmdInit.cmd&quot; -new_console:a</span><br></pre></td></tr></table></figure>
<h4 id="docker">Docker</h4>
<p>Task parameters</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;icon &quot;c:\Program Files\Docker\Docker\resources\ddvp.ico&quot;</span><br></pre></td></tr></table></figure>
<p>Commands</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmd.exe &#x2F;k docker exec -it 138b49276cbb &#x2F;bin&#x2F;bash -cur_console:n</span><br></pre></td></tr></table></figure>
<h3 id="fluent-terminal中的配置">### fluent terminal中的配置</h3>
<p>进入设置-配置文件（Profile），依次创建各类需要的终端配置。</p>
<h4 id="cmd-1">CMD</h4>
<table>
<thead>
<tr class="header">
<th>配置或参数</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td>Cmder</td>
</tr>
<tr class="even">
<td>Shell executable location</td>
<td>C:.exe</td>
</tr>
<tr class="odd">
<td>Working directory</td>
<td>E:Project</td>
</tr>
<tr class="even">
<td>Arguments</td>
<td>/k title Cmder &amp; "%CMDER_ROOT%.bat"</td>
</tr>
<tr class="odd">
<td>Theme</td>
<td>Monokai</td>
</tr>
</tbody>
</table>
<h3 id="docker-1">docker</h3>
<table>
<thead>
<tr class="header">
<th>配置或参数</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Name</td>
<td>Docker</td>
</tr>
<tr class="even">
<td>Shell executable location</td>
<td>C:.exe</td>
</tr>
<tr class="odd">
<td>Working directory</td>
<td>E:Project</td>
</tr>
<tr class="even">
<td>Arguments</td>
<td>/k title Docker &amp; %DOCKER_DIR%exec -it 138b49276cbb /bin/bash</td>
</tr>
<tr class="odd">
<td>Theme</td>
<td>Monokai</td>
</tr>
</tbody>
</table>
<h3 id="提示符自定义">提示符自定义</h3>
<p>将<code>λ</code>修改为<code>$</code>,并且将颜色设为'Bright Cryan'。在<code>%CMDER_DIR%\vendor</code>目录下打开<code>clink.lua</code>, 找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local cmder_prompt &#x3D;</span><br><span class="line">local lambda &#x3D;</span><br></pre></td></tr></table></figure>
<p>将{lamb}的色彩定义为1b[1;96;40m{lamb}，lambda值设为"$"。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local cmder_prompt &#x3D; &quot;\x1b[1;32;40m&#123;cwd&#125; &#123;git&#125;&#123;hg&#125;&#123;svn&#125; \n\x1b[1;96;40m&#123;lamb&#125; \x1b[0m&quot;</span><br><span class="line">local lambda &#x3D; &quot;$&quot;</span><br></pre></td></tr></table></figure>
<h3 id="卡顿">卡顿</h3>
<p>在进入含有git项目的目录时，因为初始设定会完整遍历该目录，所以会感觉到卡顿。可以同样修改<code>clink.lua</code>,找到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local git_dir &#x3D; get_git_dir()</span><br></pre></td></tr></table></figure>
<p>将其注释掉即可。缺点是不会显示git相关的信息。</p>
<h2 id="展示">展示</h2>
<p>配置完成后的cmder+fluent terminal如图：</p>
<p><img src="https://s2.loli.net/2022/04/14/leuNCy4g9FPtUL3.png" /></p>
<h2 id="参考">参考</h2>
<p>1/ <a href="https://zhuanlan.zhihu.com/p/71706782">Windows命令行终端神器Cmder配置及美化指南</a></p>
<p>2/ <a href="https://github.com/cmderdev/cmder/wiki/Seamless-FluentTerminal-Integration">Seamless FluentTerminal Integration</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>软件</category>
      </categories>
      <tags>
        <tag>cmder</tag>
        <tag>fluent terminal</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】multiprocessing进程间的通信（一）队列</title>
    <url>/2021/01/01/%E3%80%90python%E3%80%91multiprocessing%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>multiprocessing模块支持进程间通信的三种主要形式:<code>队列</code>、<code>管道</code>及<code>共享内存</code>。下面我们来学习一下队列的使用情况。</p>
<a id="more"></a>
<h1 id="队列multiprocessing.queue">队列（multiprocessing.queue)</h1>
<p>队列是线程和进程安全的，也就是一次只能有一个进程或线程进行操作。</p>
<p><strong>示例：</strong>将子进程产生的信息统一写入父进程，这里是使用pool来创建进程池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, RLock, freeze_support,Queue,Pipe</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> TS_logs <span class="keyword">import</span> TS_log_info</span><br><span class="line"><span class="keyword">from</span>  TS_util <span class="keyword">import</span> (</span><br><span class="line">    TS_util_get_tradelist,</span><br><span class="line">    TS_util_get_real_date,</span><br><span class="line">    TS_util_get_next_datetime,</span><br><span class="line">    TS_util_get_now_time,</span><br><span class="line">    TS_util_date_convert,</span><br><span class="line">    trade_date_sse</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_c</span>(<span class="params">q,codelist,n</span>):</span>    </span><br><span class="line">    <span class="keyword">for</span> trade_date <span class="keyword">in</span> codelist[n::<span class="number">8</span>]:</span><br><span class="line">        msg = <span class="string">&#x27;&#123;&#125; #Job&#123;&#125; Trying updating data of trade date &#123;&#125; .&#x27;</span> \</span><br><span class="line">                .<span class="built_in">format</span>(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),n,trade_date)</span><br><span class="line">        sleep(<span class="number">0.05</span>)</span><br><span class="line">        q.put(msg)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">L = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    freeze_support()  <span class="comment"># for Windows support</span></span><br><span class="line">    manager = multiprocessing.Manager()</span><br><span class="line">    <span class="comment"># 父进程创建Queue，并传给各个子进程：</span></span><br><span class="line">    q = manager.Queue()</span><br><span class="line">    tqdm.set_lock(RLock())</span><br><span class="line">    codelist = trade_date_sse</span><br><span class="line">    func = functools.partial(log_c,q,codelist)</span><br><span class="line">    p = Pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))</span><br><span class="line">    p.<span class="built_in">map</span>(func, L)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">        TS_log_info(q.get())</span><br></pre></td></tr></table></figure>
<p>如果要使用Pool创建进程，就需要使用multiprocessing.Manager()中的Queue()，而不是multiprocessing.Queue()，否则会得到一条如下的错误信息：<br />
<code>RuntimeError: Queue objects should only be shared between processes through inheritance.</code></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>multiprocessing</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】在多进程下输出日志</title>
    <url>/2021/01/08/%E3%80%90python%E3%80%91%E5%9C%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E4%B8%8B%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>可以利用队列或管道来进行多进程下的日志输出，但<a href="https://docs.python.org/3/howto/logging-cookbook.html#logging-to-a-single-file-from-multiple-processes">官方文档</a>推荐了一种利用<code>logging.SocketHandler</code>的方案来实现多进程日志输出。</p>
<p>其原理是：多个进程将各自环境下的日志通过<code>Socket</code>发送给一个专门打印日志的进程，这样就可以防止多进程打印的冲突与混乱情况。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>multiprocessing</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】multiprocessing进程间的通信（二）管道</title>
    <url>/2021/01/08/%E3%80%90python%E3%80%91multiprocessing%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1%EF%BC%88%E4%BA%8C%EF%BC%89%E7%AE%A1%E9%81%93/</url>
    <content><![CDATA[<p><code>multiprocessing.Pipe()</code>用来创建管道，返回两个连接对象，代表管道的两端，一般用于进程或者线程之间的通信，不同于<code>os.pipe()</code>,<code>os.pipe()</code>主要用来创建两个文件描述符，一个读，一个写，是单向的。而<code>multiprocessing.Pipe()</code>则可以双向通信。</p>
<a id="more"></a>
<h1 id="管道multiprocessing.pipe">管道（multiprocessing.Pipe）</h1>
<blockquote>
<p><code>multiprocessing.``Pipe</code>([<em>duplex</em>])</p>
<p>返回一对 <a href="https://docs.python.org/zh-cn/3/library/multiprocessing.html#multiprocessing.connection.Connection"><code>Connection</code></a> 对象 <code>(conn1, conn2)</code> ， 分别表示管道的两端。</p>
<p>如果 <em>duplex</em> 被置为 <code>True</code> (默认值)，那么该管道是双向的。如果 <em>duplex</em> 被置为 <code>False</code> ，那么该管道是单向的，即 <code>conn1</code> 只能用于接收消息，而 <code>conn2</code> 仅能用于发送消息。</p>
</blockquote>
<p><strong>示例：</strong>将子进程产生的信息统一写入父进程，这里是使用pool来创建进程池。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, RLock, freeze_support,Queue,Pipe</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> TS_logs <span class="keyword">import</span> TS_log_info</span><br><span class="line"><span class="keyword">from</span>  TS_util <span class="keyword">import</span> (</span><br><span class="line">    TS_util_get_tradelist,</span><br><span class="line">    TS_util_get_real_date,</span><br><span class="line">    TS_util_get_next_datetime,</span><br><span class="line">    TS_util_get_now_time,</span><br><span class="line">    TS_util_date_convert,</span><br><span class="line">    trade_date_sse</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log_c</span>(<span class="params">child_conn,codelist,n</span>):</span> </span><br><span class="line">    <span class="keyword">for</span> trade_date <span class="keyword">in</span> codelist[n::<span class="number">8</span>][<span class="number">0</span>:<span class="number">17</span>]:</span><br><span class="line">        msg = <span class="string">&#x27;&#123;&#125; #Job&#123;&#125;  trade date &#123;&#125;.&#x27;</span> \</span><br><span class="line">                .<span class="built_in">format</span>(datetime.datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>),n,trade_date)</span><br><span class="line">        child_conn.send(msg)</span><br><span class="line">    print(<span class="string">&#x27;workers exit&#x27;</span>)</span><br><span class="line"></span><br><span class="line">L = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    freeze_support()  <span class="comment"># for Windows support</span></span><br><span class="line">    parent_conn,child_conn = Pipe()</span><br><span class="line">    tqdm.set_lock(RLock())</span><br><span class="line">    codelist = trade_date_sse</span><br><span class="line">    func = functools.partial(log_c,child_conn,codelist)</span><br><span class="line">    p = Pool(initializer=tqdm.set_lock, initargs=(tqdm.get_lock(),))</span><br><span class="line">    p.<span class="built_in">map</span>(func, L)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> parent_conn.poll(<span class="number">0.001</span>):</span><br><span class="line">        print(parent_conn.recv())</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    parent_conn.close()</span><br><span class="line">    child_conn.close()</span><br></pre></td></tr></table></figure>
<p>当子进程发送一定量的数据之后会卡住，没有任何报错和提示，卡住不动！！测试大概是7000字节左右。原因尚未找到。按文档看，应该与OS有关，最大应该可达32M。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>multiprocessing</tag>
      </tags>
  </entry>
  <entry>
    <title>【量化投资】贝塔系数的计算</title>
    <url>/2021/07/17/%E3%80%90%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84%E3%80%91%E8%B4%9D%E5%A1%94%E7%B3%BB%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h1 id="目的">目的</h1>
<p>在量化分析中，经常会需要获取<span class="math inline">\(\beta\)</span>(贝塔系数），那该如何查询或计算该系数呢？</p>
<h2 id="贝塔系数的含义">贝塔系数的含义</h2>
<p>贝塔系数衡量了个股或基金相对于整个股市的波动情况。</p>
<table>
<thead>
<tr class="header">
<th>β范围</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>β=1</td>
<td>股票或基金的风险收益率与市场平均风险收益率相同</td>
</tr>
<tr class="even">
<td>β&gt;1</td>
<td>股票或基金的风险相较于市场平均更大</td>
</tr>
<tr class="odd">
<td>β&lt;1</td>
<td>股票或基金的风险相较于市场平均更小</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="查询">查询</h2>
<p>可以在<a href="http://www.iwencai.com/stockpick/search?typed=1&amp;preParams=&amp;ts=1&amp;f=1&amp;qs=stockpick_ambiguity_index&amp;selfsectsn=&amp;querytype=stock&amp;searchfilter=&amp;tid=stockpick&amp;multiIndex=%E8%B4%9D%E5%A1%94%E7%B3%BB%E6%95%B0&amp;stockpick&amp;w=%E8%B4%9D%E5%A1%94%E7%B3%BB%E6%95%B0">同花顺网站</a>中查到上市公司当日的贝塔系数。</p>
<h2 id="计算">计算</h2>
<p>相对于沪深300指数(000300.SH)的beta系数计算方式如下：<br />
<span class="math inline">\(\beta_i = \frac{标的资产i的收益与市场收益的协方差}{市场收益的方差} = \frac{Cov(r_i,r_m)}{\sigma_m^2}\)</span></p>
<p>例1、顺丰控股(002352.SZ)相对于沪深300指数(000300.SH)的beta系数计算，一定周期的沪深300指数(000300.SH)与顺丰控股(002352.SZ)的每日涨跌幅，如：2019年全年。</p>
<p>关于协方差、方差的计算方法:<br />
<a href="https://nokiasonic.github.io/2021/07/16/%E3%80%90Python%E3%80%91Pandas%E4%B9%8Bdataframe%E4%B8%8Eseries%E7%9A%84%E5%8D%8F%E6%96%B9%E5%B7%AE%E8%AE%A1%E7%AE%97/">【Python】Pandas之dataframe与series的协方差计算</a><br />
<a href="https://nokiasonic.github.io/2021/07/16/%E3%80%90Python%E3%80%91Pandas%E4%B9%8B%E6%96%B9%E5%B7%AE%E8%AE%A1%E7%AE%97/">【Python】Pandas、Numpy之方差计算</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> QUANTAXIS <span class="keyword">as</span> QA</span><br><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">&quot;all&quot;</span> </span><br><span class="line"></span><br><span class="line">stock = QA.QA_fetch_stock_day_adv(<span class="string">&#x27;002352&#x27;</span>,<span class="string">&#x27;2018-12-28&#x27;</span>,<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line">index = QA.QA_fetch_index_day_adv(<span class="string">&#x27;000300&#x27;</span>,<span class="string">&#x27;2018-12-28&#x27;</span>,<span class="string">&#x27;2019-12-31&#x27;</span>)</span><br><span class="line"></span><br><span class="line">returns_stock = stock.data.close.pct_change()</span><br><span class="line">returns_index = index.data.close.pct_change()</span><br><span class="line"><span class="comment">#计算两组数据的协方差</span></span><br><span class="line">covr = np.cov(returns_stock[<span class="number">1</span>:],returns_index[<span class="number">1</span>:])[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"><span class="comment">#计算沪深300指数数据的方差</span></span><br><span class="line">var = np.var(returns_index)</span><br><span class="line"><span class="comment">#计算贝塔值</span></span><br><span class="line">beta = covr/var</span><br><span class="line">print(<span class="string">&quot;Covariance:&#123;&#125;,Variance:&#123;&#125;,Beta:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(covr,var,beta))</span><br></pre></td></tr></table></figure>
<pre><code>Covariance:9.712842264272448e-05,Variance:0.00015577588074696037,Beta:0.6235138724748936</code></pre>
<h1 id="参考">参考</h1>
<p>1/ <a href="https://wiki.mbalib.com/wiki/%E8%B4%9D%E5%A1%94%E7%B3%BB%E6%95%B0">贝塔系数</a><br />
2/ <a href="https://zhuanlan.zhihu.com/p/136858300">股票β系数（贝塔、beta）计算的具体操作</a><br />
3/ <a href="https://blog.csdn.net/thfyshz/article/details/83443783?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-2.control">Python计算贝塔系数和夏普比率</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性代数</tag>
        <tag>贝塔</tag>
      </tags>
  </entry>
  <entry>
    <title>【应用软件】ShareX截图工具的使用</title>
    <url>/2021/09/24/%E3%80%90%E5%BA%94%E7%94%A8%E8%BD%AF%E4%BB%B6%E3%80%91ShareX%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>截图，使用过的工具有<code>sngait</code>， <code>greenshot</code>, 前者功能强大，但需要付费。后者轻巧，但软件功能较少且更新较慢，最后的稳定版还是2017年发布的。至于QQ等截图工具，需要打开QQ软件本身，不太省心。</p>
<p>在写博客的时候，大多数工具均采用矩形截图的方式， 如果需要对所截取的图片进行圆角，阴影等效果的添加，就必须使用其它软件来进行后处理。</p>
<p><code>shareX</code>恰好满足这些需求。且体量也不算大。</p>
<a id="more"></a>
<h1 id="sharex简介">shareX简介</h1>
<p>ShareX 是一款功能非常强大且免费开源的截图与屏幕记录工具 。除了正常的截图功能外，还提供多区域截图、滚动截图、屏幕取色，屏幕录制，添加水印等实用的功能。而且还可以上传到多种文件存储服务器上。可以让截图更加高效、美观。</p>
<p>更多信息及下载详见<a href="https://getsharex.com/">shareX官网</a></p>
<h1 id="sharex截图美化的实现">shareX截图美化的实现</h1>
<ol type="1">
<li><p>打开<code>shareX</code>--&gt; <code>动作设置</code>。<br />
<img src="https://s2.loli.net/2022/04/14/uNx2cCDt3eIpYgE.png" /></p></li>
<li><p>在<code>图像</code>--&gt;<code>效果</code>中点击<code>图像效果配置</code>。 <img src="https://gitee.com/nokiasonic/pic/raw/master/img/ShareX_yGfFOIJKcC.png" /> <img src="https://s2.loli.net/2022/04/14/oW1LIdqnyaslbfx.png" /></p></li>
<li><p>圆角美化 新建效果，取合适的名称，然后从<code>操作</code>中选择<code>Rounded corners</code>, 参数选择圆角弧度大小。 <img src="https://s2.loli.net/2022/04/14/yUxfQT8RnWSFp2J.png" /></p></li>
<li><p>阴影美化 从<code>过滤器</code>中选择<code>Shadow</code>, 设置合适的参数。 <img src="https://s2.loli.net/2022/04/14/tkcMVJoGjpheWLP.png" /></p></li>
<li><p>添加水印 从<code>绘图</code>中选择<code>Text watermark</code>, 并对其位置，大小，字体等参数进行设置。 <img src="https://s2.loli.net/2022/04/14/UQzq48bHKdZufSO.png" /></p></li>
</ol>
<p>这里只尝试了几种截图美化，效果，shareX内置了许多图片效果，还有已做好的模板可供选择，可见<a href="https://getsharex.com/image-effects/">Image effects - ShareX (getsharex.com)</a></p>
<h1 id="sharex截图上传">shareX截图上传</h1>
<p>内置的图床或文件上传器多为国外服务器，考虑到今后图片使用的便捷性和易维护性，尝试自定义github或gitee图床的上传。 <img src="https://s2.loli.net/2022/04/14/W7QSUtIq6pcDlN1.png" /></p>
<p><img src="https://s2.loli.net/2022/04/14/Gg9blyzh4WuFCTE.png" /> 参考<a href="https://getsharex.com/docs/custom-uploader">Custom uploader guide - ShareX (getsharex.com)</a>进行上传器的自定义，这时发现无论github还是gitee, 利用<code>API</code>上传时，</p>
<p><img src="https://s2.loli.net/2022/04/14/Chidkgf5KowXHAu.png" /></p>
<p>上传的图片内容需要用base64编码后放入<code>content</code>参数中，也就是说上传前需要对图片内容做一次base64的编码，这个目前在shareX中并没有提供，就此做罢。</p>
<p>最后采取的上传解决方案是，截图后通过<code>picgo</code>预设的图床进行上传。</p>
<p>其间遇到的问题是，shareX截图加阴影后，会将阴影部分的背景透明化，拷贝到剪粘板再通过picgo上传后，会丢失该部分透明化的背景，而变之为白色背景，这个应该是picgo无法正确从剪粘板上读取shareX处理图片的透明化信息所致。但从生成的文件上传确是正常的。这个与shareX使用.net方法不能正常通过alpha通道来处理剪粘板拷贝内容的透明度有关。 <img src="https://s2.loli.net/2022/04/14/FyLdfDVCRnQljS2.png" /></p>
<p>解决方法： shareX截图后的处理动作里，可以不选择<code>图像复制到剪粘板</code>，而是选择上<code>保存图像文件</code>及<code>将文件复制到剪粘板</code>,通过重新读取文件内容来规避。 <img src="https://s2.loli.net/2022/04/14/h5GwJnbNFegjqXv.png" /></p>
<p>至此, shareX可以满足我对博客图片美化的要求。</p>
<h1 id="参考">参考</h1>
<p>1/ <a href="https://zhuanlan.zhihu.com/p/338226481"># 一般人都不会用的强大的屏幕截图工具，添加水印、截图特效等，让你的截图更完美！</a><br />
2/ <a href="https://getsharex.com/">shareX官网</a><br />
3/ <a href="https://docs.github.com/cn/rest">GitHub REST API - GitHub Docs</a><br />
4/ <a href="https://gitee.com/api/v5/swagger#/getV5ReposOwnerRepoStargazers?ex=no">Gitee open API</a></p>
]]></content>
      <categories>
        <category>应用软件</category>
      </categories>
      <tags>
        <tag>shareX</tag>
        <tag>效率工具</tag>
        <tag>截图</tag>
      </tags>
  </entry>
  <entry>
    <title>【量化投资】通达信板块数据提取</title>
    <url>/2021/09/06/%E3%80%90%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84%E3%80%91%E9%80%9A%E8%BE%BE%E4%BF%A1%E6%9D%BF%E5%9D%97%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96/</url>
    <content><![CDATA[<h1 id="数据提取">数据提取</h1>
<p>从MongoDB中进取通达信板块数据，该数据均通过通达信api从服务器上提取并存入MongoDB。</p>
<h2 id="实例">实例</h2>
<h3 id="模糊查询">1. 模糊查询</h3>
<p>MongoDB 使用 <strong><code>$regex</code></strong> 操作符来设置匹配字符串的正则表达式来进行模糊查询。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment">#存入数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_block_list</span>(<span class="params">database</span>):</span></span><br><span class="line">    stocklist = []</span><br><span class="line">    collection = db[<span class="string">&#x27;stock_block&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> collection.find(&#123;<span class="string">&#x27;blockname&#x27;</span>:&#123;<span class="string">&#x27;$regex&#x27;</span>:<span class="string">&#x27;酒&#x27;</span>&#125;&#125;,&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>&#125;):</span><br><span class="line">        stocklist.append(item[<span class="string">&#x27;code&#x27;</span>])</span><br><span class="line">    stocklist = <span class="built_in">list</span>(<span class="built_in">set</span>(stocklist))</span><br><span class="line">    <span class="keyword">return</span> stocklist</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">    db = client[<span class="string">&#x27;quantaxis&#x27;</span>]</span><br><span class="line">    stocklist = get_block_list(database=db)</span><br><span class="line">    print(<span class="string">&quot;Total &#123;&#125; stocks are in this block.\n&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(stocklist),stocklist))</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Total 69 stocks are in this block.</span><br><span class="line">[&#39;600257&#39;, &#39;000752&#39;, &#39;600616&#39;, &#39;600766&#39;, &#39;600779&#39;, &#39;601579&#39;, &#39;603919&#39;, &#39;603198&#39;, &#39;600771&#39;, &#39;603101&#39;, &#39;600132&#39;, &#39;000524&#39;, &#39;600258&#39;, &#39;605108&#39;, &#39;000428&#39;, &#39;600750&#39;, &#39;000888&#39;, &#39;603025&#39;, &#39;002461&#39;, &#39;600238&#39;, &#39;600754&#39;, &#39;601007&#39;, &#39;000929&#39;, &#39;000596&#39;, &#39;600573&#39;, &#39;600600&#39;, &#39;603299&#39;, &#39;600059&#39;, &#39;600197&#39;, &#39;002772&#39;, &#39;600559&#39;, &#39;300237&#39;, &#39;600260&#39;, &#39;600543&#39;, &#39;000721&#39;, &#39;600084&#39;, &#39;600365&#39;, &#39;000930&#39;, &#39;000858&#39;, &#39;000860&#39;, &#39;603369&#39;, &#39;000568&#39;, &#39;600655&#39;, &#39;600809&#39;, &#39;600702&#39;, &#39;002304&#39;, &#39;002568&#39;, &#39;000869&#39;, &#39;600382&#39;, &#39;600781&#39;, &#39;002342&#39;, &#39;000829&#39;, &#39;600381&#39;, &#39;600199&#39;, &#39;002646&#39;, &#39;603589&#39;, &#39;603777&#39;, &#39;002183&#39;, &#39;000995&#39;, &#39;600252&#39;, &#39;000729&#39;, &#39;603779&#39;, &#39;002803&#39;, &#39;002186&#39;, &#39;600395&#39;, &#39;600696&#39;, &#39;600519&#39;, &#39;000007&#39;, &#39;000799&#39;]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="提取板块名称">2. 提取板块名称</h3>
<h4 id="用mongodb命令提取">用MongoDB命令提取</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).distinct(&#x27;blockname&#x27;)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/20210906121720.png" /></p>
<h4 id="用pymongo模块提取">用pymongo模块提取</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">db = client[<span class="string">&#x27;quantaxis&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;stock_block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">res = collection.distinct(<span class="string">&#x27;blockname&#x27;</span>)</span><br><span class="line">print(res[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<blockquote>
<p>[None, '300ESG', '300周期', '300非周', '3D打印', '5G概念', 'BIPV概念', 'C2M概念', 'CRO概念', 'ETC概念']</p>
</blockquote>
<p>如需要知道酒类板块的名称，可以采用模糊查询的方式来提取数据。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).distinct(&#x27;blockname&#x27;,&#123;&#x27;blockname&#x27;:&#123;$regex:&#x27;酒&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/20210906125011.png" /></p>
<h3 id="提取板块中的股票代码及名称">3. 提取板块中的股票代码及名称</h3>
<p>查询板块<code>白酒</code>及<code>白酒概念</code>中的股票列表（包括代码及名称)</p>
<h4 id="仅提取代码">仅提取代码</h4>
<h5 id="用mongodb命令提取-1">用MongoDB命令提取</h5>
<p>因通达信同一板块定义中包含通达信行业、申万行业等不同分类，含有重复项，所以用去重方式进行查询。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).distinct(&#x27;code&#x27;,&#123;&#x27;blockname&#x27;:&#x27;白酒&#x27;&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).distinct(&#x27;code&#x27;,&#123;&#x27;blockname&#x27;:&#x27;白酒概念&#x27;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/20210907095910.png" /></p>
<h5 id="用pymongo模块提取-1">用pymongo模块提取</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">db = client[<span class="string">&#x27;quantaxis&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;stock_block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">res = collection.distinct(<span class="string">&#x27;code&#x27;</span>,&#123;<span class="string">&#x27;blockname&#x27;</span>:<span class="string">&#x27;白酒&#x27;</span>&#125;)</span><br><span class="line">print(<span class="string">&quot;Total &#123;&#125; stocks are in this block&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(res)))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>​</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Total 20 stocks are in this block</span><br><span class="line">[&#x27;000568&#x27;, &#x27;000596&#x27;, &#x27;000799&#x27;, &#x27;000858&#x27;, &#x27;000860&#x27;, &#x27;000995&#x27;, &#x27;002304&#x27;, &#x27;002646&#x27;, &#x27;600197&#x27;, &#x27;600199&#x27;, &#x27;600519&#x27;, &#x27;600559&#x27;, &#x27;600702&#x27;, &#x27;600779&#x27;, &#x27;600809&#x27;, &#x27;603025&#x27;, &#x27;603198&#x27;, &#x27;603369&#x27;, &#x27;603589&#x27;, &#x27;603919&#x27;]</span><br></pre></td></tr></table></figure>
<h4 id="提取代码及名称">提取代码及名称</h4>
<p>需要使用联表查询，使用<code>aggregate</code>函数。</p>
<h5 id="用mongodb命令提取-2">用MongoDB命令提取</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).aggregate([&#123;</span><br><span class="line"><span class="meta">  $</span><span class="bash">lookup: &#123; // 左连接</span></span><br><span class="line">    from: &quot;stock_list&quot;,   // 关联到stock_list表</span><br><span class="line">    localField: &quot;code&quot;,   // stock_block 表关联的字段</span><br><span class="line">    foreignField: &quot;code&quot;, // stock_list 表关联的字段</span><br><span class="line">    as: &quot;stock_list&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123; $match : &#123;&#x27;blockname&#x27; : &#x27;白酒&#x27;&#125;&#125;,</span><br><span class="line">&#123; $project: &#123;&#x27;code&#x27;:1,&#x27;stock_list.name&#x27;:1,&#x27;_id&#x27;:0&#125;&#125;,</span><br><span class="line">&#123; $unwind:&#x27;$stock_list&#x27;&#125;,</span><br><span class="line">&#123; $replaceWith:&#123;&#x27;code&#x27;:&#x27;$code&#x27;,&#x27;name&#x27;:&#x27;$stock_list.name&#x27;&#125;&#125;,</span><br><span class="line">&#123; $group: &#123;_id:&#x27;$code&#x27;,&#x27;name&#x27;:&#123; $first:&quot;$name&quot; &#125;&#125;&#125;,</span><br><span class="line">&#123; $replaceWith:&#123;&#x27;code&#x27;:&#x27;$_id&#x27;,&#x27;name&#x27;:&#x27;$name&#x27;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/20210907113155.png" /></p>
<h5 id="用pymongo模块提取-2">用pymongo模块提取</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">db = client[<span class="string">&#x27;quantaxis&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;stock_block&#x27;</span>]</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">res = collection.aggregate(</span><br><span class="line">  [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="string">&#x27;$lookup&#x27;</span>: &#123;    <span class="comment">#左连接              </span></span><br><span class="line">            <span class="string">&#x27;from&#x27;</span>: <span class="string">&quot;stock_list&quot;</span>,    <span class="comment"># 关联到stock_list表</span></span><br><span class="line">            <span class="string">&#x27;localField&#x27;</span>: <span class="string">&quot;code&quot;</span>,    <span class="comment"># stock_block 表关联的字段</span></span><br><span class="line">            <span class="string">&#x27;foreignField&#x27;</span>: <span class="string">&quot;code&quot;</span>,  <span class="comment"># stock_list 表关联的字段</span></span><br><span class="line">            <span class="string">&#x27;as&#x27;</span>: <span class="string">&quot;stock_list&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$match&#x27;</span> : &#123;<span class="string">&#x27;blockname&#x27;</span> : <span class="string">&#x27;白酒&#x27;</span>&#125;&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$project&#x27;</span>: &#123;<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;stock_list.name&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;_id&#x27;</span>:<span class="number">0</span>&#125;&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$unwind&#x27;</span>:<span class="string">&#x27;$stock_list&#x27;</span>&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$replaceWith&#x27;</span>:&#123;<span class="string">&#x27;code&#x27;</span>:<span class="string">&#x27;$code&#x27;</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;$stock_list.name&#x27;</span>&#125;&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$group&#x27;</span>: &#123;<span class="string">&#x27;_id&#x27;</span>:<span class="string">&#x27;$code&#x27;</span>,<span class="string">&#x27;name&#x27;</span>:&#123; <span class="string">&#x27;$first&#x27;</span>:<span class="string">&quot;$name&quot;</span> &#125;&#125;&#125;,</span><br><span class="line">&#123; <span class="string">&#x27;$replaceWith&#x27;</span>:&#123;<span class="string">&#x27;code&#x27;</span>:<span class="string">&#x27;$_id&#x27;</span>,<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;$name&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">    print(item)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">print(<span class="string">&quot;Total &#123;&#125; stocks are in this block&quot;</span>.<span class="built_in">format</span>(count))</span><br></pre></td></tr></table></figure>
<ul>
<li><code>白酒</code>板块</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;code&#x27;: &#x27;000858&#x27;, &#x27;name&#x27;: &#x27;五 粮 液&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600519&#x27;, &#x27;name&#x27;: &#x27;贵州茅台&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002646&#x27;, &#x27;name&#x27;: &#x27;青青稞酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600809&#x27;, &#x27;name&#x27;: &#x27;山西汾酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000995&#x27;, &#x27;name&#x27;: &#x27;皇台酒业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603025&#x27;, &#x27;name&#x27;: &#x27;大豪科技&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002304&#x27;, &#x27;name&#x27;: &#x27;洋河股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000596&#x27;, &#x27;name&#x27;: &#x27;古井贡酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600559&#x27;, &#x27;name&#x27;: &#x27;老白干酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603198&#x27;, &#x27;name&#x27;: &#x27;迎驾贡酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000799&#x27;, &#x27;name&#x27;: &#x27;酒鬼酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603369&#x27;, &#x27;name&#x27;: &#x27;今世缘&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603589&#x27;, &#x27;name&#x27;: &#x27;口子窖&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600779&#x27;, &#x27;name&#x27;: &#x27;水井坊&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600199&#x27;, &#x27;name&#x27;: &#x27;金种子酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600702&#x27;, &#x27;name&#x27;: &#x27;舍得酒业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000860&#x27;, &#x27;name&#x27;: &#x27;顺鑫农业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603919&#x27;, &#x27;name&#x27;: &#x27;金徽酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000568&#x27;, &#x27;name&#x27;: &#x27;泸州老窖&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600197&#x27;, &#x27;name&#x27;: &#x27;伊力特&#x27;&#125;</span><br><span class="line">Total 20 stocks are in this block</span><br></pre></td></tr></table></figure>
<ul>
<li><code>白酒概念</code>板块</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;code&#x27;: &#x27;600238&#x27;, &#x27;name&#x27;: &#x27;海南椰岛&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002304&#x27;, &#x27;name&#x27;: &#x27;洋河股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000596&#x27;, &#x27;name&#x27;: &#x27;古井贡酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600382&#x27;, &#x27;name&#x27;: &#x27;*ST广珠&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600750&#x27;, &#x27;name&#x27;: &#x27;江中药业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600252&#x27;, &#x27;name&#x27;: &#x27;中恒集团&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002646&#x27;, &#x27;name&#x27;: &#x27;青青稞酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600519&#x27;, &#x27;name&#x27;: &#x27;贵州茅台&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600696&#x27;, &#x27;name&#x27;: &#x27;岩石股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600771&#x27;, &#x27;name&#x27;: &#x27;广誉远&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600809&#x27;, &#x27;name&#x27;: &#x27;山西汾酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603919&#x27;, &#x27;name&#x27;: &#x27;金徽酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600655&#x27;, &#x27;name&#x27;: &#x27;豫园股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000888&#x27;, &#x27;name&#x27;: &#x27;峨眉山Ａ&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000930&#x27;, &#x27;name&#x27;: &#x27;中粮科技&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000829&#x27;, &#x27;name&#x27;: &#x27;天音控股&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002183&#x27;, &#x27;name&#x27;: &#x27;怡 亚 通&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002342&#x27;, &#x27;name&#x27;: &#x27;巨力索具&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000799&#x27;, &#x27;name&#x27;: &#x27;酒鬼酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002803&#x27;, &#x27;name&#x27;: &#x27;吉宏股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;300237&#x27;, &#x27;name&#x27;: &#x27;美晨生态&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600257&#x27;, &#x27;name&#x27;: &#x27;大湖股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;002772&#x27;, &#x27;name&#x27;: &#x27;众兴菌业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600260&#x27;, &#x27;name&#x27;: &#x27;ST凯乐&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600395&#x27;, &#x27;name&#x27;: &#x27;盘江股份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600559&#x27;, &#x27;name&#x27;: &#x27;老白干酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000995&#x27;, &#x27;name&#x27;: &#x27;皇台酒业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600766&#x27;, &#x27;name&#x27;: &#x27;*ST园城&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603101&#x27;, &#x27;name&#x27;: &#x27;汇嘉时代&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603198&#x27;, &#x27;name&#x27;: &#x27;迎驾贡酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603025&#x27;, &#x27;name&#x27;: &#x27;大豪科技&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603369&#x27;, &#x27;name&#x27;: &#x27;今世缘&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603777&#x27;, &#x27;name&#x27;: &#x27;来伊份&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000568&#x27;, &#x27;name&#x27;: &#x27;泸州老窖&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600197&#x27;, &#x27;name&#x27;: &#x27;伊力特&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000858&#x27;, &#x27;name&#x27;: &#x27;五 粮 液&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600779&#x27;, &#x27;name&#x27;: &#x27;水井坊&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600199&#x27;, &#x27;name&#x27;: &#x27;金种子酒&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600702&#x27;, &#x27;name&#x27;: &#x27;舍得酒业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;000860&#x27;, &#x27;name&#x27;: &#x27;顺鑫农业&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600781&#x27;, &#x27;name&#x27;: &#x27;ST辅仁&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603589&#x27;, &#x27;name&#x27;: &#x27;口子窖&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;600381&#x27;, &#x27;name&#x27;: &#x27;青海春天&#x27;&#125;</span><br><span class="line">&#123;&#x27;code&#x27;: &#x27;603299&#x27;, &#x27;name&#x27;: &#x27;苏盐井神&#x27;&#125;</span><br><span class="line">Total 44 stocks are in this block</span><br></pre></td></tr></table></figure>
<h3 id="查询股票所属板块">4. 查询股票所属板块</h3>
<p>以<code>贵州茅台（600519）</code>为例：</p>
<h4 id="用mongodb命令提取-3">用MongoDB命令提取</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;stock_block&#x27;).distinct(&#x27;blockname&#x27;,&#123;&#x27;code&#x27;:&#x27;600519&#x27;&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/nokiasonic/pic/raw/master/img/20210907180637.png" /></p>
<h4 id="用pymongo模块提取-3">用pymongo模块提取</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">client = MongoClient(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">27017</span>)</span><br><span class="line">db = client[<span class="string">&#x27;quantaxis&#x27;</span>]</span><br><span class="line">collection = db[<span class="string">&#x27;stock_block&#x27;</span>]</span><br><span class="line"></span><br><span class="line">res = collection.distinct(<span class="string">&#x27;blockname&#x27;</span>,&#123;<span class="string">&#x27;code&#x27;</span>:<span class="string">&#x27;600519&#x27;</span>&#125;)</span><br><span class="line">print(<span class="string">&quot;The stock belongs to Total &#123;&#125; blocks&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(res)))</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The stock belongs to Total 36 blocks</span><br><span class="line">[&#x27;300ESG&#x27;, &#x27;300非周&#x27;, &#x27;MSCI成份&#x27;, &#x27;上证180&#x27;, &#x27;上证50&#x27;, &#x27;上证混改&#x27;, &#x27;上证超大&#x27;, &#x27;中华A80&#x27;, &#x27;中证100&#x27;, &#x27;中证龙头&#x27;, &#x27;保险重仓&#x27;, &#x27;北上重仓&#x27;, &#x27;国证农业&#x27;, &#x27;国证成长&#x27;, &#x27;基金重仓&#x27;, &#x27;大盘成长&#x27;, &#x27;大盘股&#x27;, &#x27;央视50&#x27;, &#x27;富时A50&#x27;, &#x27;投资时钟&#x27;, &#x27;持续增长&#x27;, &#x27;昨成交20&#x27;, &#x27;沪深300&#x27;, &#x27;泛珠三角&#x27;, &#x27;白酒&#x27;, &#x27;白酒概念&#x27;, &#x27;百元股&#x27;, &#x27;绩优股&#x27;, &#x27;罗素大盘&#x27;, &#x27;股权转让&#x27;, &#x27;融资融券&#x27;, &#x27;行业龙头&#x27;, &#x27;证金汇金&#x27;, &#x27;通达信88&#x27;, &#x27;银河99&#x27;, &#x27;高市净率&#x27;]</span><br></pre></td></tr></table></figure>
<h1 id="参考">参考</h1>
<p>1/ <a href="https://docs.mongodb.com/manual/aggregation/">Aggregation — MongoDB Manual</a></p>
<p>2/ <a href="https://docs.mongodb.com/manual/reference/operator/aggregation/group/">$group (aggregation) — MongoDB Manual</a></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>量化投资</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>通达信</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>为博客文章增加Valine评论系统</title>
    <url>/2020/12/10/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%A2%9E%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>目前常用的评论系统有以下这些：</p>
<ul>
<li><p>Github大礼包：<a href="https://link.zhihu.com/?target=https%3A//github.com/iissnan/hexo-theme-next/issues/1604">gitment</a>， <a href="https://link.zhihu.com/?target=https%3A//github.com/iissnan/hexo-theme-next/pull/2037">gitalk</a><strong>（推荐），</strong><a href="https://link.zhihu.com/?target=https%3A//www.vincentqin.tech/2016/08/09/build-a-website-using-hexo/%23%E5%A2%9E%E5%8A%A0Gitter">gitter</a><strong>（推荐）;</strong> 三个都支持<strong>Markdown；</strong></p></li>
<li><p>基于leancloud的无后端评论系统：<a href="https://link.zhihu.com/?target=https%3A//valine.js.org/%23/">Valine</a><strong>（推荐，</strong>支持<strong>Markdown）；</strong></p></li>
<li><p>国外的有几个：<a href="https://link.zhihu.com/?target=http%3A//www.disqus.com/">disqus</a>(漂亮，但需翻墙)，<a href="https://link.zhihu.com/?target=https%3A//www.hypercomments.com/">hypercomments</a><strong>（推荐，</strong>不支持<strong>Markdown）。</strong></p></li>
</ul>
<p>来试试如何用Valine搭建评论系统吧。</p>
<a id="more"></a>
<h2 id="注册leanclound获取app-id-和-app-key">注册LeanClound,获取APP ID 和 APP Key</h2>
<p>Valine 是基于 <a href="https://leancloud.cn/">LeanCloud</a> 作为数据存储的，所以需要注册一个账号，因为备案与否的关系，选择在国际区注册，在注册完成后，需要创建应用。</p>
<p><img src="https://s2.loli.net/2022/04/14/kCUuMnrTcDtp6Ol.png" /></p>
<p><img src="https://s2.loli.net/2022/04/14/jJgkvhER96HTxIP.png" /></p>
<p>点击<code>存储</code>设置，查看是否有<code>Comment</code>和 <code>Counter</code>，没有则创建，权限设为无限制。</p>
<p><img src="https://s2.loli.net/2022/04/14/Ph8VWKl45Rsgvnm.png" /></p>
<p>在<code>安全中心</code>里将除<code>数据存储</code>之外的服务全部关闭。</p>
<p><img src="https://s2.loli.net/2022/04/14/dCbk2I5LfuQVqlo.png" /></p>
<p>最后点击<code>应用 Keys</code> 取得我们 <code>AppKey</code> 和 <code>App id</code></p>
<h2 id="在hexo-next主题中配置">在Hexo Next主题中配置</h2>
<p>首先打开 https://www.jsdelivr.com/package/npm/valine 获取最新的 valine.min.js 的cdn地址：</p>
<p><img src="https://s2.loli.net/2022/04/14/L53GDIsQKOmekbq.png" /></p>
<p>修改博客项目目录下的<code>_config.next.yml</code>文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># valine: //cdn.jsdelivr.net/npm/valine@1/dist/Valine.min.js</span></span><br><span class="line"><span class="comment"># valine: //cdnjs.cloudflare.com/ajax/libs/valine/1.3.10/Valine.min.js</span></span><br><span class="line"><span class="string">valine:https://cdn.jsdelivr.net/npm/valine@1.4.14/dist/Valine.min.js</span></span><br></pre></td></tr></table></figure>
<p>以及</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
<p>appid及appkey就填写我们从LeanClound那里获得的信息。</p>
<h2 id="利用valine-admin进行评论管理">利用Valine Admin进行评论管理</h2>
<p>Valine Admin 是Valine的扩展和增强，主要实现评论邮件通知、评论管理、垃圾评论过滤等功能。支持完全自定义的邮件通知模板，基于 Akismet API 实现准确的垃圾评论过滤。</p>
<h3 id="部署">部署</h3>
<ol type="1">
<li>在 <a href="https://leancloud.cn/dashboard/#/apps">Leancloud</a> 云引擎部署界面，填写代码库并保存：https://github.com/DesertsP/Valine-Admin.git</li>
</ol>
<p><img src="https://s2.loli.net/2022/04/14/J5gvLmkdSjYGDRp.png" /></p>
<ol start="2" type="1">
<li><p>在 <a href="https://leancloud.cn/dashboard/#/apps">Leancloud</a> 云引擎设置界面，设置环境变量以及 Web 二级域名。</p>
<p><img src="https://s2.loli.net/2022/04/14/iFGUe98r3PghSfR.png" /></p></li>
<li><p>环境变量说明</p></li>
</ol>
<table>
<colgroup>
<col style="width: 12%" />
<col style="width: 27%" />
<col style="width: 59%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">变量</th>
<th style="text-align: left;">示例</th>
<th style="text-align: left;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">SITE_NAME</td>
<td style="text-align: left;">Deserts</td>
<td style="text-align: left;">[必填]博客名称</td>
</tr>
<tr class="even">
<td style="text-align: left;">SITE_URL</td>
<td style="text-align: left;">https://nokiasonic.github.io</td>
<td style="text-align: left;">[必填]首页地址</td>
</tr>
<tr class="odd">
<td style="text-align: left;">SMTP_SERVICE</td>
<td style="text-align: left;"></td>
<td style="text-align: left;">[新版支持]邮件服务提供商，支持 QQ、163、126、Gmail 以及 更多</td>
</tr>
<tr class="even">
<td style="text-align: left;">SMTP_USER</td>
<td style="text-align: left;">xxxxx@hotmail.com</td>
<td style="text-align: left;">[必填] SMTP 登录用户, 这个在注册访问管理员注册页面<code>https://nokiasonic.github.io/sign-up</code>，会用作注册管理员登录信息。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">SMTP_PASS</td>
<td style="text-align: left;">ccxxxxxxxxch</td>
<td style="text-align: left;">[必填] SMTP 登录密码（QQ邮箱需要获取独立密码）</td>
</tr>
<tr class="even">
<td style="text-align: left;">SENDER_NAME</td>
<td style="text-align: left;">nokiasonic</td>
<td style="text-align: left;">[必填]发件人</td>
</tr>
<tr class="odd">
<td style="text-align: left;">SENDER_EMAIL</td>
<td style="text-align: left;">xxxxx@hotmail.com</td>
<td style="text-align: left;">[必填]发件邮箱</td>
</tr>
<tr class="even">
<td style="text-align: left;">ADMIN_URL</td>
<td style="text-align: left;">https://xxx.avosapps.us</td>
<td style="text-align: left;">[建议] Web 主机二级域名，用于自动唤醒</td>
</tr>
<tr class="odd">
<td style="text-align: left;">BLOGGER_EMAIL</td>
<td style="text-align: left;">xxxxx@hotmail.com</td>
<td style="text-align: left;">[可选]博主通知收件地址，默认使用 SENDER_EMAIL</td>
</tr>
<tr class="even">
<td style="text-align: left;">AKISMET_KEY</td>
<td style="text-align: left;">xxxxxxxxxxxx</td>
<td style="text-align: left;">[可选] Akismet Key 用于垃圾评论检测，设为 MANUAL_REVIEW 开启人工审核，留空不使用反垃圾</td>
</tr>
</tbody>
</table>
<p>登入ADMIN_URL对应的链接，可以进行评论的查看及管理。</p>
<p><img src="https://s2.loli.net/2022/04/14/TjoOWhpUJXZ2asv.png" /></p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>美好生活</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Valine</tag>
      </tags>
  </entry>
  <entry>
    <title>使用github/gitee来作为图床系统</title>
    <url>/2020/12/10/%E4%BD%BF%E7%94%A8github%E5%8F%8Agitee%E6%9D%A5%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>日常进行博客及其它文章或笔记的写作时，经常需要在文章内容里插入图片。 当文档需要发布或存储到云服务器上时，就需要考虑将引用的图片放置到图床系统中。下面讲述下利用github或gitee来搭建图床系统的方法。</p>
<a id="more"></a>
<h2 id="一利用github来建立图床">一、利用github来建立图床</h2>
<h3 id="建立github图床仓库">建立Github图床仓库</h3>
<p><img src="https://s2.loli.net/2022/04/14/E62Lyc3w4xi9DFS.png" /> ### 设置Token</p>
<p>进入全局设置，点击<code>Developer Settings</code> -&gt; <code>Personal access tokens</code>，选择<code>Generate new token</code></p>
<p><img src="https://s2.loli.net/2022/04/14/cY3nCtzwTqhXiGE.png" /> ### 设置PicGO客户端</p>
<h4 id="下载">下载</h4>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">PicGo的可执行文件下载地址</a></p>
<h4 id="设置">设置</h4>
<p><img src="https://s2.loli.net/2022/04/14/iElfYChU8GNwLXH.png" /> - 仓库名：按照“账户名/仓库名”的格式填写； - 分支名：统一填写为<code>main</code>； - Tocken：将之前的Github的Token黏贴在这里； - 存储路径：若设置为img/，则会在repository下创建一个“img”文件夹； - 自定义域名：在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接，放到剪切板。这里约定遵循如下的格式：<code>域名/用户名/仓库名/分支名。</code></p>
<h4 id="上传图片">上传图片</h4>
<p>在picgo上传区，可以直接上传剪贴板上的图片或保存成文件上传。这里不再说明。</p>
<hr />
<p>因为github显示图片相当不稳定。 所以可以使用gitee来替代它作为图床的托管仓库。</p>
<h2 id="二利用gitee来建立图床">二、利用gitee来建立图床</h2>
<h3 id="在gitee中创建仓库">在gitee中创建仓库</h3>
<p>按照常规创建仓库的方式创建一个专门用于图床的仓库</p>
<p><img src="https://s2.loli.net/2022/04/14/pvFt8EJju23MgfQ.png" /> ### 获取token</p>
<p><img src="https://s2.loli.net/2022/04/14/qYVEzvkCI52tjWi.png" /> ### 在PicGO中安装gitee插件</p>
<h4 id="安装">安装</h4>
<p><img src="https://s2.loli.net/2022/04/14/lKsvgEtIMRVG2nS.png" /> #### 配置插件</p>
<p><img src="https://s2.loli.net/2022/04/14/e4CiMmgEPFR2caf.png" /> 这里需要注意的是repo的名字中大小写字母需要完全一致且是repo仓库路径。否则会报404错误。</p>
<h4 id="上传图片-1">上传图片</h4>
<p>至此，图床系统搭建完成，可以愉快地写作了。</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>美好生活</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>gitee</tag>
        <tag>picgo</tag>
      </tags>
  </entry>
  <entry>
    <title>线性代数在量化投资分析中的应用</title>
    <url>/2020/12/17/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9C%A8%E9%87%8F%E5%8C%96%E6%8A%95%E8%B5%84%E5%88%86%E6%9E%90%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="基本概念">基本概念</h1>
<h2 id="标量向量矩阵和张量">标量、向量、矩阵和张量</h2>
<p><img src="https://s2.loli.net/2022/04/14/KAo4Ji1u7qktjnm.png" style="zoom:25%;float:left" /></p>
<p><br/> <br/></p>
<p>• <code>标量（scalar）</code>：一个标量就是一个单独的数，它不同于线性代数中研究的其他大部分对象（通常是多个数的数组）。<br />
• <code>向量（vector）</code>：一个向量是一列数。这些数是有序排列的。<br />
• <code>矩阵（matrix）</code>：矩阵是一个二维数组，其中的每一个元素被两个索引（而非一个）所确定。<br />
• <code>张量（tensor）</code>：在某些情况下，我们会讨论坐标超过两维的数组。一般地，一个数组中的元素分布在若干维坐标的规则网格中，我们称之为张量。</p>
<a id="more"></a>
<h2 id="转置">转置</h2>
<p><code>转置（transpose）</code>是矩阵的重要操作之一。矩阵的转置是以对角线为轴的镜像，这条从左上角到右下角的对角线被称为 主对角线（main diagonal）。</p>
<p>向量可以看作只有一列的矩阵。对应地，向量的转置可以看作是只有一行的矩阵。<br />
<img src="https://s2.loli.net/2022/04/14/iUMGpmav9JezSfc.png" align=left style="zoom:35%" ><br />
<br/> <br/> 方阵的转置<br />
<img src="https://s2.loli.net/2022/04/14/vSE8k3dbUfD1QRV.png" style="zoom:25%;float:left"/> <br/> <br/> 非方阵的转置<br />
<img src="https://s2.loli.net/2022/04/14/3stURNkzihx56dn.png" style="zoom:25%;float:left"/><br />
<br/> <br/> <br/> 上标 <span class="math inline">\(^\text{T}\)</span>用来表述转置矩阵</p>
<p><span class="math inline">\({A}= \begin{bmatrix} A_{1,1} &amp; A_{1,2} \\ A_{2,1} &amp; A_{2,2} \\ A_{3,1} &amp; A_{3,2} \end{bmatrix}\)</span> 的转置矩阵为：</p>
<p><span class="math inline">\({A}^{\text{T}}= \begin{bmatrix} A_{1,1} &amp; A_{2,1} &amp; A_{3,1} \\ A_{1,2} &amp; A_{2,2} &amp; A_{3,2} \end{bmatrix}\)</span><br />
<br/> <img src="https://s2.loli.net/2022/04/14/bHZtks2YRfeNn9X.png" style="zoom:25%;float:left"/> <br/> 矩阵的形状 (<span class="math inline">\(m \times n\)</span>) 在转置后变为 (<span class="math inline">\(n \times m\)</span>).</p>
<p><br/></p>
<h2 id="线性方程组">线性方程组</h2>
<p>对于一个线性方程组</p>
<p><span class="math inline">\(\large \begin{equation} \left\{ \begin{aligned} x_1+x_2=2\\ x_1-x_2=4\\ \end{aligned} \right. \end{equation}\)</span></p>
<p>这里有两个方程和两个变量，一般可以得到唯一解或无穷多解。利用线性代数可以对其进行简洁地表示和运算。线性代数的运算离不开矩阵，矩阵是按照长方阵列排列的实数或复数集合。例如存在矩阵</p>
<p><span class="math inline">\(\large  A=\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right], X=\left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right], b=\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right]\)</span></p>
<p>这样，上述线性方程组可记为<span class="math inline">\(AX=b\)</span>.</p>
<p>即： <span class="math inline">\(\large \left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]\left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right]=\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right]\)</span></p>
<p>假想<br />
<span class="math inline">\(\large \frac{1}{\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]}\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]\left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right]=\frac{1}{\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]}\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right]\)</span></p>
<p>得： <span class="math inline">\(\large \left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right]=\frac{1}{\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]}\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right]\)</span></p>
<h2 id="示例">示例</h2>
<p>在Python中，使用numpy库可以方便的进行矩阵操作。</p>
<h3 id="使用numpy来创建向量vector">使用numpy来创建向量(vector)</h3>
<p><span class="math inline">\({x} =\begin{bmatrix} x_1 \\ x_2 \\ \cdots \\ x_n \end{bmatrix}\)</span></p>
<h4 id="创建指定长度及数值的向量">创建指定长度及数值的向量</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<pre><code>array([1, 2, 3, 4])</code></pre>
<h4 id="创建指定长度及随机数值的向量">创建指定长度及随机数值的向量</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,size=<span class="number">10</span>)</span><br><span class="line">x</span><br></pre></td></tr></table></figure>
<pre><code>array([8, 2, 2, 6, 5, 7, 5, 4, 4, 4])</code></pre>
<h3 id="使用numpy来创建矩阵matrix">使用numpy来创建矩阵(matrix)</h3>
<p><span class="math inline">\({A}= \begin{bmatrix} A_{1,1} &amp; A_{1,2} &amp; \cdots &amp; A_{1,n} \\ A_{2,1} &amp; A_{2,2} &amp; \cdots &amp; A_{2,n} \\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots \\ A_{m,1} &amp; A_{m,2} &amp; \cdots &amp; A_{m,n} \end{bmatrix}\)</span></p>
<h4 id="创建指定长度及数值的矩阵">创建指定长度及数值的矩阵</h4>
<p>例如：<span class="math inline">\(3 \times 2\)</span> 的矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4],
       [5, 6]])</code></pre>
<h4 id="创建指定长度及随机数值的矩阵">创建指定长度及随机数值的矩阵</h4>
<p>例如：<span class="math inline">\(3 \times 2\)</span> 的矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.random.randint(<span class="number">1</span>,<span class="number">10</span>,size=(<span class="number">3</span>,<span class="number">2</span>))</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>array([[6, 5],
       [7, 5],
       [7, 6]])</code></pre>
<h3 id="利用numpy来进行矩阵转置">利用numpy来进行矩阵转置</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2],
       [3, 4],
       [5, 6]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A_t = A.T</span><br><span class="line">A_t</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 3, 5],
       [2, 4, 6]])</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(A.shape)</span><br><span class="line">print(A_t.shape)</span><br></pre></td></tr></table></figure>
<pre><code>(3, 2)
(2, 3)</code></pre>
<h3 id="求解线性方程组">求解线性方程组</h3>
<p>求二元一次线性方程组</p>
<p><span class="math inline">\(\large \begin{equation} \left\{ \begin{aligned} x_1+x_2=2\\ x_1-x_2=4\\ \end{aligned} \right. \end{equation}\)</span></p>
<p>的解。</p>
<p><strong>分析</strong>：如章节1.3中所述。<br />
<span class="math inline">\(\large  A=\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right], X=\left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right], b=\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right].\)</span></p>
<p>这样，上述线性方程组可记为<span class="math inline">\(AX=b\)</span>.<br />
则：<span class="math inline">\(X=\large\frac{1}{A}b\)</span></p>
<p>即：<span class="math inline">\(\large \left[  \begin{matrix}  x_1 \\  x_2 \\  \end{matrix}  \right]=\frac{1}{\left[  \begin{matrix}  1 &amp; 1 \\  1 &amp; -1 \\  \end{matrix}  \right]}\left[  \begin{matrix}  2 \\  4 \\  \end{matrix}  \right]\)</span></p>
<p>说明：<br />
<span class="math inline">\({A}\)</span>的逆矩阵表述为<span class="math inline">\({A}^{-1}\)</span>. 逆矩阵满足如一条件。</p>
<p><span class="math inline">\({A}^{-1}{A}={I}_n\)</span></p>
<p>NumPy 提供了线性代数函数库 <strong>linalg</strong>，该库包含了线性代数所需的所有功能，可以看看下面的说明：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>dot</code></td>
<td style="text-align: left;">两个数组的点积，即元素对应相乘。</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>vdot</code></td>
<td style="text-align: left;">两个向量的点积</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>inner</code></td>
<td style="text-align: left;">两个数组的内积</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>matmul</code></td>
<td style="text-align: left;">两个数组的矩阵积</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>determinant</code></td>
<td style="text-align: left;">数组的行列式</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>solve</code></td>
<td style="text-align: left;">求解线性矩阵方程</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>inv</code></td>
<td style="text-align: left;">计算矩阵的乘法逆矩阵</td>
</tr>
</tbody>
</table>
<p>计算过程如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建矩阵A, 这里用了两种方法，实际中A1 =A2</span></span><br><span class="line">A1 = np.mat(<span class="string">&#x27;1 1;1 -1&#x27;</span>)</span><br><span class="line">A2 = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>,-<span class="number">1</span>]])</span><br><span class="line">b = np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#用solve函数求解线性方程</span></span><br><span class="line">X1 = np.linalg.solve(A1,b)</span><br><span class="line">X2 = np.linalg.solve(A2,b)</span><br><span class="line">print(X1)</span><br><span class="line">print(X2)</span><br></pre></td></tr></table></figure>
<pre><code>[ 3. -1.]
[ 3. -1.]</code></pre>
<p>此外，也可利用先求A的逆矩阵，然后和b进行点积求解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>,-<span class="number">1</span>]])</span><br><span class="line">b = np.array([<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用点积的两种方式</span></span><br><span class="line">X1 = (np.linalg.inv(A)).dot(b)</span><br><span class="line">X2 = np.dot(np.linalg.inv(A),b)</span><br><span class="line">print(X1)</span><br><span class="line">print(X2)</span><br></pre></td></tr></table></figure>
<pre><code>[ 3. -1.]
[ 3. -1.]</code></pre>
<h1 id="线性回归模型简介">线性回归模型简介</h1>
<p>假设被解释变量<span class="math inline">\(y\)</span>与多个解释变量<span class="math inline">\(X_1,X_2,...,X_p\)</span>之间具有线性关系，则记为</p>
<p><span class="math inline">\(\large y=\beta_0+\beta_1X_1+\beta_2X_2+...+\beta_pX_p+\mu\)</span></p>
<p>称之为多元线性回归模型，其中<span class="math inline">\(\beta_0,\beta_1,...,\beta_p\)</span>为<span class="math inline">\(p+1\)</span>个未知参数，<span class="math inline">\(\mu\)</span>为随机扰动项，表示除<span class="math inline">\(X_1,X_2,...,X_p\)</span>以外影响<span class="math inline">\(y\)</span>的所有非观测因素，并假设<span class="math inline">\(\mu\sim N(0,\sigma^2)\)</span>。</p>
<p>假设有<span class="math inline">\(n\)</span>组观测数据<span class="math inline">\(y_i,X_{1i},X_{2i},...,X_{pi},i=1,2,...,n\)</span>，则存在线性方程组</p>
<p><span class="math inline">\(\large \begin{equation} \left\{ \begin{aligned} y_1=\beta_0+\beta_1X_{11}+\beta_2X_{21}+...+\beta_pX_{p1}+\mu_1\\ y_2=\beta_0+\beta_1X_{12}+\beta_2X_{22}+...+\beta_pX_{p2}+\mu_2\\ \vdots\\ y_n=\beta_0+\beta_1X_{1n}+\beta_2X_{2n}+...+\beta_pX_{pn}+\mu_n\\ \end{aligned} \right. \end{equation}\)</span></p>
<p>若记</p>
<p><span class="math inline">\(Y=(y_1,y_2,...,y_n)^\tau， X=\left[  \begin{matrix}  1&amp;X_{11} &amp; X_{21}&amp;...&amp;X_{p1} \\  1&amp;X_{12} &amp; X_{22}&amp;...&amp;X_{p2} \\  \vdots &amp; \vdots&amp;\ddots\\  1&amp;X_{1n} &amp; X_{2n}&amp;...&amp;X_{pn} \\  \end{matrix}  \right]，\beta=(\beta_1,\beta_2,...,\beta_n)^\tau，\mu=(\mu_1,\mu_2,...,\mu_n)^\tau\)</span> 则线性方程组可表示为</p>
<p><span class="math inline">\(\large Y=X\beta+\mu\)</span></p>
<p>通过参数估计方法，可以得到未知参数<span class="math inline">\(\beta\)</span>的估计值。参见<a href="https://zhuanlan.zhihu.com/p/91095053">计量经济学：多元线性回归的最小二乘估计</a></p>
<p><span class="math inline">\(\large \hat{\beta}=(X^\tau X)^{-1}X^\tau Y\)</span></p>
<h1 id="线性回归模型求解模拟">线性回归模型求解模拟</h1>
<p><code>statsmodels</code>是Python中一个强大的统计分析包，包含了回归分析、时间序列分析、假设检验等等的功能，当需要在Python中进行回归分析时，就可以导入statsmodels。</p>
<p><code>statsmodels.regression.linear_model</code>里有回归函数<code>statsmodels.OLS</code>，它的输入参数有<code>(endog, exog, missing, hasconst)</code>。一般只考虑前两个输入，其中，<code>endog</code>是回归中的因变量<span class="math inline">\(Y\)</span>，是一个<span class="math inline">\(n\)</span>维的向量；<code>exog</code>是回归中的自变量<span class="math inline">\(X_1,X_2,...,X_P\)</span>，由于statsmodels.OLS不会假设回归模型有常数项，所以我们应该假设模型是</p>
<p><span class="math inline">\(\large y_t=\beta_0X_{0t}+\beta_1X_{1t}+\beta_2X_{2t}+...+\beta_pX_{pt}+\mu,t=1,2,...,n\)</span></p>
<p>其中，对所有<span class="math inline">\(t=1,2,...,n\)</span>，令<span class="math inline">\(X_{0t}=1\)</span>。因此，exog的输入是一个<span class="math inline">\(n\times (p+1)\)</span>的向量。</p>
<p>statsmodels.OLS的输出结果是statsmodels.regression.linear_model.OLS类，并没有进行任何运算。在OLS的模型之上调用拟合函数 fit()，才进行回归运算，并且得到statsmodels.regression.linear_model.RegressionResultsWrapper，它包含了这组数据进行回归拟合的结果摘要。调用params可以查看计算出的回归系数<span class="math inline">\(\beta_0,\beta_1,...,\beta_p\)</span>。 下面将分连续变量和离散变量两种情况来模拟求解线性回归模型。</p>
<h1 id="参考">参考</h1>
<ol type="1">
<li><a href="https://hadrienj.github.io/posts/Deep-Learning-Book-Series-Introduction/">Deep Learning Book Series · Introduction</a><br />
</li>
<li><a href="https://zhuanlan.zhihu.com/p/65259880">Numpy中矩阵计算模块linalg的常用函数</a></li>
</ol>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>量化投资</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian学习（一）</title>
    <url>/2021/09/27/Obsidian%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="背景">背景</h1>
<p>最近对[[【知识管理】Zettelkasten笔记法|Zettelkasten笔记法]]进行学习，也在学习过程中了解到了<code>Obsidian</code>, 它可以帮助人们高效地建立适合自己的知识管理体系。所以在梳理整合自己知识体系的同时，也同步进行了<code>Obsidian</code>的学习。</p>
<a id="more"></a>
<h1 id="obsidian是什么">Obsidian是什么？</h1>
<p><code>Obsidian</code>是什么？正如其<a href="https://obsidian.md/">Obsidian官网</a>宣称的</p>
<blockquote>
<p>Obsidian is a powerful knowledge base that works on top of<br />
a local folder of plain text Markdown files.</p>
</blockquote>
<p>从字里行间我们可以了解到，它是基于<strong>Markdown文件</strong>的<strong>本地</strong>知识管理软件，它的特点可以归纳为: - 本地化 - 基于<code>markdown</code> - 知识管理 第三个特点就决定了它与<code>Typora</code>等markdown编辑器有了本质的区别，它是如何体现出它强大的知识管理能力来呢？</p>
<h1 id="为什么要选择obsidian">为什么要选择Obsidian?</h1>
<h2 id="个人用户免费">个人用户免费</h2>
<p>目前类似的<code>Roam Research</code>等软件收费颇高，像<code>Obsidian</code>如此良心的软件并不多见。<br />
<img src="https://gitee.com/nokiasonic/pic/raw/master/img/msedge_481gTyW4AC.png" /></p>
<h2 id="数据本地化">数据本地化</h2>
<p><code>Obsidian</code>很好地保护了自己笔记内容的隐私，而其它笔记软件多由于采用数据库方式来管理笔记，一般使用上传内容至服务提供商的方式来实现，而<code>Obsidian</code>使用所谓的<code>库</code>,实际上就是基于文件夹的方式，建立不同的库，可以使用各自的主题，插件，非常方便。使用本地化结构的知识管理系统，最大的优点在于不依赖于工具软件本身，就算有朝一日，决定不用<code>Obsidian</code>,也可以很容易地将自己的知识管理体系进行迁移。</p>
<h2 id="与其它软件的联动较强">与其它软件的联动较强</h2>
<p>可以与<code>Zotero</code>联动实现文献管理互动，可以与<code>logseq</code>联动实现日程管理等等，总而言之，通过有效地使用工具，高效地提升自己的知识管理能力及执行能力。</p>
<h2 id="良好生态的社区环境与丰富的插件">良好生态的社区环境与丰富的插件</h2>
<p><code>Obsidian</code>的社区生态良好，开发了许多实用的第三方插件。</p>
<p><a href="https://forum.obsidian.md/">Obsidian英文社区</a> <a href="https://forum-zh.obsidian.md/">Obsidian中文社区</a> 在软件设置里的<code>社区插件</code>中关闭<code>安全模式</code>后，可以安装自己需要的插件。</p>
<h2 id="优秀的移动端体验">优秀的移动端体验</h2>
<p>在<code>android</code>和<code>ios</code>下都有APP可以安装使用。</p>
<h1 id="obsidian能做什么">Obsidian能做什么？</h1>
<h2 id="撰写技术文章">撰写技术文章</h2>
<p>对于一直习惯用markdown方式来写技术文章的人，<code>Obsidian</code>也提供了不亚于<code>Typora</code>的写作体验。</p>
<h2 id="计划">计划</h2>
<p>例如日清单，工作计划等都可以使用或通过<code>Obsidian</code>及其插件进行。</p>
<h2 id="读书笔记">读书笔记</h2>
<p>以前一直是用<code>Notion</code>来作读书笔记，但相对于把思绪集中在写作内容上，<code>Notion</code>会花费相对多的时间来进行版面的设计。而使用markdown方式的便利性在使用<code>Obsidian</code>的过程中就得到了体现。</p>
<h2 id="双向链接与知识图谱">双向链接与知识图谱</h2>
<p>这也是目前流行的笔记推崇的概念，目的是把头脑里杂乱无章的知识网状化，系统化。</p>
<h1 id="写在最后">写在最后</h1>
<p>无论工具多么先进，最终还是要看执行的人是否真正把关注点放在工具要解决的事务上，而非纠缠、沉溺于工具本身。 希望通过<code>Obsidian</code>学习的同时，也为自己初步建立一个适合自己的知识管理体系。</p>
]]></content>
      <categories>
        <category>专栏</category>
      </categories>
      <tags>
        <tag>Obsidian/学习</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用pandas高速处理数据</title>
    <url>/2020/12/08/%E5%A6%82%E4%BD%95%E7%94%A8pandas%E9%AB%98%E9%80%9F%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>因为需要对大量数据进行处理，有必要探讨比较下怎么操作具有较高的性能。</p>
<a id="more"></a>
<h2 id="创建dataframe数据">创建Dataframe数据</h2>
<p>使用QA创建了一个包含6列和61006行的Dataframe。它包含了2020年11月16日至12月4日的OHLC和成交量数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> QUANTAXIS <span class="keyword">as</span> QA</span><br><span class="line"></span><br><span class="line">code = QA.QA_fetch_stock_list_adv().code.tolist()</span><br><span class="line">daydata = QA.QA_fetch_stock_day_adv(code, <span class="string">&#x27;2020-11-16&#x27;</span>, <span class="string">&#x27;2020-12-04&#x27;</span>)</span><br><span class="line">df = daydata.data</span><br><span class="line">print(df.shape)</span><br><span class="line">df.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>you are using non-interactive mdoel quantaxis
(61001, 6)</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
</tr>
</tbody>
</table>
</div>
<p>显示dataframe的内存占用情况。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info(memory_usage = <span class="string">&#x27;deep&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
MultiIndex: 61001 entries, (2020-11-16 00:00:00, 000001) to (2020-12-04 00:00:00, 689009)
Data columns (total 6 columns):
open      61001 non-null float64
high      61001 non-null float64
low       61001 non-null float64
close     61001 non-null float64
volume    61001 non-null float64
amount    61001 non-null float64
dtypes: float64(6)
memory usage: 3.2 MB</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line">df1 = df</span><br><span class="line">col_name = df1.columns.tolist()</span><br><span class="line">col_name.insert(<span class="number">6</span>,<span class="string">&#x27;status&#x27;</span>)</span><br><span class="line">df1 = df1.reindex(columns=col_name)</span><br><span class="line">df1.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>CPU times: user 1.72 ms, sys: 1.99 ms, total: 3.71 ms
Wall time: 3.21 ms</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
<th>
status
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
<td>
NaN
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
<td>
NaN
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="效率测试">效率测试</h2>
<h3 id="测试1使用下标循环">测试1：使用下标循环</h3>
<p>下标循环是通过循环一个下标数列，通过iloc去不断获取数据。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(df1)):</span><br><span class="line">    <span class="keyword">if</span> (df1.iloc[i][<span class="string">&#x27;close&#x27;</span>] - df1.iloc[i][<span class="string">&#x27;open&#x27;</span>]) &gt;=<span class="number">0</span>:</span><br><span class="line">        df1.iloc[i][<span class="string">&#x27;status&#x27;</span>] = <span class="number">1</span>        </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df1.iloc[i][<span class="string">&#x27;status&#x27;</span>] = -<span class="number">1</span>   </span><br><span class="line">df1.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>CPU times: user 33.6 s, sys: 136 ms, total: 33.8 s
Wall time: 34.1 s</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
<th>
status
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
<td>
1.0
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="测试2iterrows循环">测试2：Iterrows循环</h3>
<p>该循环方式是通过iterrows进行循环，ind和row分别代表了每一行的index和内容。测试例子大概需要s，比起下标循环速度提升了321倍。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ind, row <span class="keyword">in</span> df1.iterrows():</span><br><span class="line">    <span class="keyword">if</span> row[<span class="string">&#x27;close&#x27;</span>] - row[<span class="string">&#x27;open&#x27;</span>] &gt;=<span class="number">0</span>:</span><br><span class="line">        df1.iloc[i][<span class="string">&#x27;status&#x27;</span>] = <span class="number">1</span>     </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        df1.iloc[i][<span class="string">&#x27;status&#x27;</span>] = -<span class="number">1</span>  </span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">df1.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>CPU times: user 18.5 s, sys: 82.7 ms, total: 18.6 s
Wall time: 18.8 s</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
<th>
status
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
<td>
-1.0
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
<td>
1.0
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
<td>
1.0
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="测试3apply循环">测试3：Apply循环</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"></span><br><span class="line">df1[<span class="string">&#x27;status&#x27;</span>] = (df1[<span class="string">&#x27;close&#x27;</span>]-df[<span class="string">&#x27;open&#x27;</span>]).apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt;=<span class="number">0</span> <span class="keyword">else</span> -<span class="number">1</span>)</span><br><span class="line">df1.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>CPU times: user 23.8 ms, sys: 1.99 ms, total: 25.8 ms
Wall time: 35.6 ms</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
<th>
status
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
<td>
1
</td>
</tr>
</tbody>
</table>
</div>
<h3 id="测试4numpy内置向量化函数">测试4：numpy内置向量化函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%%time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">df1[<span class="string">&#x27;status&#x27;</span>] = np.where((df1.close -  df1.<span class="built_in">open</span>)&gt;=<span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">df1.head(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>CPU times: user 1.74 ms, sys: 2.99 ms, total: 4.72 ms
Wall time: 10.4 ms</code></pre>
<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }
    
    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
<thead>
<tr style="text-align: right;">
<th>
</th>
<th>
</th>
<th>
open
</th>
<th>
high
</th>
<th>
low
</th>
<th>
close
</th>
<th>
volume
</th>
<th>
amount
</th>
<th>
status
</th>
</tr>
<tr>
<th>
date
</th>
<th>
code
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
<th>
</th>
</tr>
</thead>
<tbody>
<tr>
<th rowspan="10" valign="top">
2020-11-16
</th>
<th>
000001
</th>
<td>
17.08
</td>
<td>
17.43
</td>
<td>
16.90
</td>
<td>
17.37
</td>
<td>
759856.0
</td>
<td>
1.308190e+09
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000002
</th>
<td>
29.39
</td>
<td>
29.50
</td>
<td>
29.00
</td>
<td>
29.20
</td>
<td>
516576.0
</td>
<td>
1.509810e+09
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000004
</th>
<td>
31.15
</td>
<td>
31.46
</td>
<td>
30.11
</td>
<td>
30.61
</td>
<td>
72456.0
</td>
<td>
2.223127e+08
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000005
</th>
<td>
2.68
</td>
<td>
2.70
</td>
<td>
2.65
</td>
<td>
2.69
</td>
<td>
64372.0
</td>
<td>
1.725762e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000006
</th>
<td>
5.66
</td>
<td>
5.74
</td>
<td>
5.62
</td>
<td>
5.72
</td>
<td>
98253.0
</td>
<td>
5.592563e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000007
</th>
<td>
9.42
</td>
<td>
9.42
</td>
<td>
9.18
</td>
<td>
9.20
</td>
<td>
22567.0
</td>
<td>
2.094628e+07
</td>
<td>
-1
</td>
</tr>
<tr>
<th>
000008
</th>
<td>
2.72
</td>
<td>
2.74
</td>
<td>
2.70
</td>
<td>
2.73
</td>
<td>
171930.0
</td>
<td>
4.678304e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000009
</th>
<td>
7.71
</td>
<td>
7.88
</td>
<td>
7.66
</td>
<td>
7.82
</td>
<td>
320180.0
</td>
<td>
2.492149e+08
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000010
</th>
<td>
4.19
</td>
<td>
4.27
</td>
<td>
4.10
</td>
<td>
4.24
</td>
<td>
71661.0
</td>
<td>
3.004320e+07
</td>
<td>
1
</td>
</tr>
<tr>
<th>
000011
</th>
<td>
13.76
</td>
<td>
14.40
</td>
<td>
13.58
</td>
<td>
14.39
</td>
<td>
105639.0
</td>
<td>
1.489735e+08
</td>
<td>
1
</td>
</tr>
</tbody>
</table>
</div>
<h2 id="结论">结论</h2>
<p><code>for</code>循环及向量化的使用对性能有着较大的影响：<br />
1、如果确定需要使用循环，则应始终选择apply方法。<br />
2、否则，vectorization总是更好的，因为它更快！</p>
]]></content>
      <categories>
        <category>技术笔记</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
</search>
